# Functions:
# error_msg
# warning_msg
# info_msg
# time_cal
# prepare_host
# mount_chroot
# umount_chroot
# install_deb_chroot
# do_umount
# cleanup
# check_loop_device
# prepare_toolchains
# prepare_packages
# get_package_list_hash
# create_sources_list


## Print error message
## $1 - message
error_msg() {
	local _FILE=${BASH_SOURCE[1]}
	local _LINE=${BASH_LINENO[0]}

	echo -e "$_FILE:$_LINE" $ERROR "$1"
}

## Print warning message
## $1 - message
warning_msg() {
	local _FILE=${BASH_SOURCE[1]}
	local _LINE=${BASH_LINENO[0]}

    echo -e "$_FILE:$_LINE" $WARNING "$1"
}

## Print information message
## $1 - message
info_msg() {
	echo -e $INFO "$1"
}

## Calculate time
## $1 - time in seconds
time_cal() {
	local minutes

	minutes=$(($1 / 60))

	echo "Time elapsed: $minutes minute(s)."
}

## Prepare host
## Install essential packages
prepare_host() {

	if [[ $(dpkg --print-architecture) != "amd64" ]]; then
		error_msg "Your build host architecture is not supported,please use a 'x86-x64' build host."
		return -1
	fi

	local build_host=$(lsb_release -sc)
	info_msg "Build host: $build_host"

	if [[ -z "$build_host" || "artful bionic" != *"$build_host"* ]]; then
		error_msg "Your build host is not supported! Please use 'Ubuntu artful/bionic' as your build host or try to build in Docker."
		return -1
	fi

	if [[ "$DISTRIB_RELEASE" == "bionic" && "$build_host" != "bionic" ]]; then
		error_msg "Building Ubuntu Bionic images requires a Bionic build host, please upgrade your build host or try to build in Docker."
		return -1
	fi

	grep -q i386 <(dpkg --print-foreign-architectures) || (warning_msg "Requires root privileges, please enter your passowrd!" && sudo dpkg --add-architecture i386)
	if systemd-detect-virt -q -c; then
		info_msg "Running in container: $(systemd-detect-virt)"
		# disable apt-cacher unless NO_APT_CACHER=no is not specified explicitly
		if [[ $NO_APT_CACHER != no ]]; then
			info_msg "apt-cacher is disabled in containers, set NO_APT_CACHER=no to override"
			NO_APT_CACHER=yes
		fi
		CONTAINER_COMPAT="yes"
		export CONTAINER_COMPAT
		export NO_APT_CACHER
	fi

	local hostdeps="wget ca-certificates device-tree-compiler pv bc lzop zip binfmt-support build-essential ccache debootstrap ntpdate \
			gawk gcc-arm-linux-gnueabihf qemu-user-static u-boot-tools uuid-dev zlib1g-dev unzip libusb-1.0-0-dev fakeroot \
			parted pkg-config libncurses5-dev whiptail debian-keyring debian-archive-keyring f2fs-tools libfile-fcntllock-perl rsync libssl-dev \
			nfs-kernel-server btrfs-tools ncurses-term p7zip-full kmod dosfstools libc6-dev-armhf-cross \
			curl patchutils python liblz4-tool libpython2.7-dev linux-base swig libpython-dev aptly acl \
			locales ncurses-base pixz dialog systemd-container udev lib32stdc++6 libc6-i386 lib32ncurses5 lib32tinfo5 \
			bison libbison-dev flex libfl-dev lib32z1"

	# warning: apt-cacher-ng will fail if installed and used both on host and in container/chroot environment with shared network
	# set NO_APT_CACHER=yes to prevent installation errors in such case
	if [[ $NO_APT_CACHER != yes ]]; then hostdeps="$hostdeps apt-cacher-ng"; fi

	local deps=()
	local installed=$(dpkg-query -W -f '${db:Status-Abbrev}|${binary:Package}\n' '*' 2>/dev/null | grep '^ii' | awk -F '|' '{print $2}' | cut -d ':' -f 1)

	for packet in $hostdeps; do
		if ! grep -q -x -e "$packet" <<< "$installed"; then deps+=("$packet"); fi
	done

	if [[ ${#deps[@]} -gt 0 ]]; then
		info_msg "Installing build dependencies"
		info_msg "Requires root privileges, please enter your passowrd!"
		sudo apt update
		sudo apt -y --no-install-recommends install "${deps[@]}"
		sudo update-ccache-symlinks
	fi

	# enable arm binary format so that the cross-architecture chroot environment will work
	if ! grep -q binfmt_misc <(lsmod); then
		info_msg "Module 'binfmt_misc' not installed, try to install it!"
		warning_msg "Requires root privileges, please enter your passowrd!"
		sudo modprobe -q binfmt_misc || {
			# FIXME 'binfmt_misc' should be installed on host PC manually
			# https://github.com/khadas/fenix/issues/35#issuecomment-492326880
			if systemd-detect-virt -q -c; then
				error_msg "You are built in container: $(systemd-detect-virt), but the module 'binfmt_misc' is not installed, please exit the container to execute 'sudo modprobe binfmt_misc' on your host PC and try again!"
			fi

			exit -1
		}
	fi
	if  grep -q binfmt_misc <(lsmod); then
		mountpoint -q /proc/sys/fs/binfmt_misc/ || sudo mount binfmt_misc -t binfmt_misc /proc/sys/fs/binfmt_misc
		test -e /proc/sys/fs/binfmt_misc/qemu-arm || sudo update-binfmts --enable qemu-arm
		test -e /proc/sys/fs/binfmt_misc/qemu-aarch64 || sudo update-binfmts --enable qemu-aarch64
	fi
}

## Mount chroot
mount_chroot() {
	local target=$1
	if [ -z "$target" ]; then
		echo "Usage: mount_chroot <target>"
		return -1
	fi
	mount -t proc chproc $target/proc
	mount -t sysfs chsys $target/sys
	mount -t devtmpfs chdev $target/dev || mount --bind /dev $target/dev
	mount -t devpts chpts $target/dev/pts
}

## Umount chroot
umount_chroot() {
	local target=$1
	if [ -z "$target" ]; then
		echo "Usage: umount_chroot <target>"
		return -1
	fi
	umount -l $target/dev/pts
	umount -l $target/dev
	umount -l $target/proc
	if mount | grep "$target/sys/kernel/security" > /dev/null; then
		umount $target/sys/kernel/security
	fi
	umount -l $target/sys
}

## Install debs in chroot
install_deb_chroot()
{
	local package=$1
	local name=$(basename $package)
	cp $package $ROOTFS_TEMP/root/$name
	info_msg "Installing $name in chroot..."
	mount_chroot "$ROOTFS_TEMP"
	chroot $ROOTFS_TEMP /bin/bash -c "dpkg -i /root/$name"
	umount_chroot "$ROOTFS_TEMP"
	rm -f $ROOTFS_TEMP/root/$name
}

## Umount
do_umount() {
	if mount | grep $1 > /dev/null; then
		umount $1
    fi
}

## Cleanup
cleanup() {
    cd $ROOT
    echo "Cleanup..."
    sync

	trap - INT TERM EXIT

    if mount | grep $ROOTFS_TEMP > /dev/null; then
        do_umount "$ROOTFS_TEMP/dev/pts"
        do_umount "$ROOTFS_TEMP/dev"
        do_umount "$ROOTFS_TEMP/proc"
        do_umount "$ROOTFS_TEMP/sys/kernel/security"
        do_umount "$ROOTFS_TEMP/sys"

		do_umount "$ROOTFS_TEMP"
	fi

	if mount | grep $ROOTFS > /dev/null; then
		if [ "$INSTALL_TYPE" == "SD-USB" ]; then
			if mount | grep "$ROOTFS/boot" > /dev/null; then
				do_umount "$ROOTFS/boot"
				# detach all used devices
				losetup -D
			fi
		fi

		do_umount "$ROOTFS"
	fi
}

# Check & Create loop device if not exist
check_loop_device()
{
	local device=$1

	PARTITIONS=$(lsblk --raw --output "MAJ:MIN" --noheadings ${device} | tail -n +2)
	COUNTER=1
	for i in $PARTITIONS; do
		MAJ=$(echo $i | cut -d: -f1)
		MIN=$(echo $i | cut -d: -f2)
		if [ ! -e "${device}p${COUNTER}" ]; then
			if [ "$CONTAINER_COMPAT" == "yes" ]; then
				warning_msg "Creating device node: ${device}p${COUNTER}"
				mknod ${device}p${COUNTER} b $MAJ $MIN
			else
				error_msg "Device node $device does not exist!"
				return -1
			fi
		fi
		COUNTER=$((COUNTER + 1))
	done
}

## Prepare toolhains
prepare_toolchains() {

    build_package "gcc-linaro-aarch64-linux-gnu:host"
    build_package "gcc-linaro-aarch64-linux-gnu-6.3:host"
    build_package "gcc-linaro-aarch64-none-elf:host"
    build_package "gcc-linaro-arm-none-eabi:host"
    build_package "gcc-arm-none-eabi:host"
    if [ "$UBOOT" == "mainline" ]; then
        build_package "gcc-linaro-aarch64-elf:host"
    fi

    return 0
}

## Prepare packages
prepare_packages() {

    build_package "utils:host"
    build_package "images_upgrade:host"

	if [ "$VENDOR" == "Rockchip" ]; then
		build_package "rkbin:host"
	fi
}

## returns md5 hash for current package list
get_package_list_hash()
{
	( printf '%s\n' $PACKAGE_LIST | sort -u; printf '%s\n' $PACKAGE_LIST_EXCLUDE | sort -u; echo "$ROOTFSCACHE_VERSION" ) | md5sum | cut -d' ' -f 1
}

## create_sources_list <release> <basedir>
##
## <release>: stretch|bionic
## <basedir>: path to root directory
create_sources_list()
{
	local release=$1
	local basedir=$2
	[[ -z $basedir ]] && error_msg "No basedir passed to create_sources_list" && return -1

	case $release in
	stretch|buster)
	cat <<-EOF > $basedir/etc/apt/sources.list
	deb http://${DEBIAN_MIRROR} $release main contrib non-free
	#deb-src http://${DEBIAN_MIRROR} $release main contrib non-free

	deb http://${DEBIAN_MIRROR} ${release}-updates main contrib non-free
	#deb-src http://${DEBIAN_MIRROR} ${release}-updates main contrib non-free

	deb http://${DEBIAN_MIRROR} ${release}-backports main contrib non-free
	#deb-src http://${DEBIAN_MIRROR} ${release}-backports main contrib non-free

	deb http://security.debian.org/ ${release}/updates main contrib non-free
	#deb-src http://security.debian.org/ ${release}/updates main contrib non-free
	EOF
	;;

	bionic)
	cat <<-EOF > $basedir/etc/apt/sources.list
	deb http://${UBUNTU_MIRROR} $release main restricted universe multiverse
	#deb-src http://${UBUNTU_MIRROR} $release main restricted universe multiverse

	deb http://${UBUNTU_MIRROR} ${release}-security main restricted universe multiverse
	#deb-src http://${UBUNTU_MIRROR} ${release}-security main restricted universe multiverse

	deb http://${UBUNTU_MIRROR} ${release}-updates main restricted universe multiverse
	#deb-src http://${UBUNTU_MIRROR} ${release}-updates main restricted universe multiverse

	deb http://${UBUNTU_MIRROR} ${release}-backports main restricted universe multiverse
	#deb-src http://${UBUNTU_MIRROR} ${release}-backports main restricted universe multiverse
	EOF
	;;
	esac
}
