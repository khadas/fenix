# Functions:
# build_uboot
# build_linux
# build_linux_debs
# build_uboot_deb

## Build U-Boot
build_uboot() {
    ret=0

    if [ "$UBOOT" == "mainline" ]; then
		rm -rf $BUILD/.stamps/u-boot-mainline/
		build_package "u-boot-mainline:target"

        return 0
    fi

    if [ "$UBOOT_GIT_BRANCH" == "" ]; then
        error_msg "'UBOOT_GIT_BRANCH' is empty!"
        return -1
    fi

    cd ${ROOT}
    if [ ! -d u-boot/.git ]; then
        echo "U-boot repository does not exist, clone u-boot repository('$UBOOT_GIT_BRANCH') from '$UBOOT_SOURCE_URL'..."
        ## Clone u-boot from Khadas GitHub
        git clone $UBOOT_SOURCE_URL -b $UBOOT_GIT_BRANCH
        [ $? != 0 ] && error_msg "Failed to clone 'u-boot'" && return -1
    fi

    cd u-boot/
	touch .scmversion

    if ! git branch | grep "^* $UBOOT_GIT_BRANCH$" > /dev/null; then
        if ! git branch | grep "^  $UBOOT_GIT_BRANCH$" > /dev/null; then
            # New branch? Try to fetch it.
            echo "Fetching '$UBOOT_GIT_BRANCH' from '$UBOOT_SOURCE_URL'..."
            git fetch origin $UBOOT_GIT_BRANCH:$UBOOT_GIT_BRANCH
        fi

        echo "U-boot: Switch to branch '$UBOOT_GIT_BRANCH'"
        make distclean
		# Check modifications
		check_modifications || {
			error_msg "U-boot: can't checkout to branch '$UBOOT_GIT_BRANCH', please commit your modifications and try again!"
			return -1
		}

        git checkout $UBOOT_GIT_BRANCH
        [ $? != 0 ] && error_msg "U-boot: Switch to branch '$UBOOT_GIT_BRANCH' failed." && return -1
    else
        echo "U-boot: Already on branch '$UBOOT_GIT_BRANCH'"
    fi

    # Update u-boot
    update_git_repo "$PWD" "$UBOOT_GIT_BRANCH"

    info_msg "Build u-boot..."
	export PATH=$UBOOT_COMPILER_PATH:$PATH
	if [ "$UBOOT_FORCE_REBUILD" == "yes" ]; then
		info_msg "U-boot: Force cleaning..."
		make distclean
	fi
	rm -rf .config *.bin *.img
	make $UBOOT_DEFCONFIG
    make -j${NR_JOBS} CROSS_COMPILE=${UBOOT_COMPILER}

	if [[ $(type -t uboot_custom_postprocess) == function ]]; then
		uboot_custom_postprocess
	fi

	ret=$?

    return $ret
}

## Build Linux
build_linux() {
    ret=0

    if [ "$LINUX" == "mainline" ]; then
		rm -rf $BUILD/.stamps/linux-mainline/
		build_package "linux-mainline:target"

        return 0
    fi

    if [ "$LINUX_GIT_BRANCH" == "" ] || [ "$LINUX_DTB" == "" ]; then
        [ "$LINUX_GIT_BRANCH" == "" ] && error_msg "'LINUX_GIT_BRANCH' is empty!"
        [ "$LINUX_DTB" == "" ] && error_msg "'LINUX_DTB' is empty!"
        return -1
    fi

    cd ${ROOT}
    if [ ! -d linux/.git ]; then
        echo "Linux repository does not exist, clone linux repository('$LINUX_GIT_BRANCH') from '$LINUX_SOURCE_URL'..."
        ## Clone linux from Khadas GitHub
        git clone $LINUX_SOURCE_URL -b $LINUX_GIT_BRANCH
        [ $? != 0 ] && error_msg "Failed to clone 'linux'" && return -1
    fi

    cd linux/
    touch .scmversion

    if ! git branch | grep "^* $LINUX_GIT_BRANCH$" > /dev/null; then
        if ! git branch | grep "^  $LINUX_GIT_BRANCH$" > /dev/null; then
            # New branch? Try to fetch it.
            echo "Fetching '$LINUX_GIT_BRANCH' from '$LINUX_SOURCE_URL'..."
            git fetch origin $LINUX_GIT_BRANCH:$LINUX_GIT_BRANCH
        fi

        echo "Linux: Switch to branch '$LINUX_GIT_BRANCH'"
        make ARCH=arm64 distclean

		# Walkaround for branch switch
		if [ -f drivers/gpu/arm/mali400/mali/__malidrv_build_info.c ]; then
			rm drivers/gpu/arm/mali400/mali/__malidrv_build_info.c
		fi

		# Check modifications
		check_modifications || {
			error_msg "Linux: can't checkout to branch '$LINUX_GIT_BRANCH', please commit your modifications and try again!"

			return -1
		}

        git checkout $LINUX_GIT_BRANCH
        [ $? != 0 ] && error_msg "Linux: Switch to branch '$LINUX_GIT_BRANCH' failed." && return -1
    else
        echo "Linux: Already on branch '$LINUX_GIT_BRANCH'"
    fi

    # Update linux
    update_git_repo "$PWD" "$LINUX_GIT_BRANCH"

    info_msg "Build linux..."
    export PATH=$KERNEL_COMPILER_PATH:$PATH
    make ARCH=arm64 $LINUX_DEFCONFIG
    make -j${NR_JOBS} ARCH=arm64 CROSS_COMPILE=${KERNEL_COMPILER} Image dtbs  modules
}

## Build linux debs
build_linux_debs() {

	# Build linux debs
	info_msg "Build linux debs..."

	IMAGE_LINUX_VERSION=`head -n 1 $LINUX_DIR/include/config/kernel.release | xargs echo -n`

	cd $ROOT

	# Hack for deb builder. To pack what's missing in headers pack.
	if [ ! -f /tmp/headers-debian-byteshift.patch ]; then
		cp archives/patches/misc/headers-debian-byteshift.patch /tmp
	fi

	# Different packaging for 4.3+
	if linux-version compare $IMAGE_LINUX_VERSION ge 4.3; then
		KERNEL_PACKING="bindeb-pkg"
	else
		KERNEL_PACKING="deb-pkg"
	fi

	export PATH=$KERNEL_COMPILER_PATH:$PATH
	make -j${NR_JOBS} -C $LINUX_DIR $KERNEL_PACKING KDEB_PKGVERSION="$VERSION" LOCAL_VERSION="-${VENDOR,,}-${LINUX}" KBUILD_DEBARCH="$DISTRIB_ARCH" ARCH=arm64 DEBFULLNAME="Khadas" DEBEMAIL="hello@khadas.com" CROSS_COMPILE="${KERNEL_COMPILER}"

	mkdir -p $BUILD_DEBS/$VERSION

	if [ "$LINUX" == "mainline" ]; then
		mv $BUILD/*.deb $BUILD_DEBS/$VERSION
	else
		mv $ROOT/*.deb $BUILD_DEBS/$VERSION
	fi
}

## Build u-boot deb
build_uboot_deb() {
	local pkgname="${LINUX_UBOOT_DEB}"
	local pkgdir="$BUILD_IMAGES/.tmp/${pkgname}_${VERSION}-${UBOOT_VER}_${DISTRIB_ARCH}"

	rm -rf $pkgdir
	mkdir -p $pkgdir/usr/lib/u-boot $pkgdir/DEBIAN

	# Copy u-boot files
	local uboot_files=$UBOOT_IMAGE_FILES
	for file in $uboot_files; do
		if [ ! -f $UBOOT_IMAGE_DIR/$file ]; then
			error_msg "U-boot file '$file' not found!"
			return -1
		fi
		cp $UBOOT_IMAGE_DIR/$file $pkgdir/usr/lib/u-boot
	done

	cat <<-EOF > $pkgdir/usr/lib/u-boot/platform_install.sh
	DIR=/usr/lib/u-boot
	$(declare -f write_uboot_platform)
	$(declare -f setup_write_uboot_platform)
	EOF

	# Set up control file
	cat <<-EOF > $pkgdir/DEBIAN/control
	Package: $pkgname
	Version: $VERSION-$UBOOT_VER
	Architecture: $DISTRIB_ARCH
	Maintainer: khadas <hello@khadas.com>
	Installed-Size: 1
	Section: kernel
	Priority: optional
	Provides: fenix-u-boot
	Replaces: fenix-u-boot, linux-u-boot-vim1, linux-u-boot-vim2, linux-u-boot-vim3, linux-u-boot-vim1-mainline, linux-u-boot-vim1-vendor, linux-u-boot-vim2-mainline, linux-u-boot-vim2-vendor, linux-u-boot-vim3-mainline, linux-u-boot-vim3-vendor, linux-u-boot-vim3l-mainline, linux-u-boot-vim3l-vendor
	Description: U-boot $UBOOT_VER
	EOF

	# Set up postinst file
	cat <<-EOF > $pkgdir/DEBIAN/postinst
	#!/bin/bash

	# Exit if we are running chroot
	if [ "\$(stat -c %d:%i /)" != "\$(stat -c %d:%i /proc/1/root/.)" ]; then exit 0; fi

	source /usr/lib/u-boot/platform_install.sh
	[[ \$(type -t setup_write_uboot_platform) == function ]] && setup_write_uboot_platform
	if [[ \$DEVICE = VENDOR ]]; then
		echo "Create u-boot updating mark, will update u-boot in next bootup cycle."
		echo "Please reboot the board to update u-boot."
		touch /usr/lib/u-boot/.UBOOT-NEED-UPDATE
		sync
	else
		if [[ -b \$DEVICE ]]; then
			echo "Updating u-boot on \$DEVICE"
			write_uboot_platform \$DIR \$DEVICE
			sync
		else
			echo "Device \$DEVICE does not exist, skipping"
		fi
	fi

	exit 0
	EOF

	chmod 755 $pkgdir/DEBIAN/postinst

	cat <<-EOF > $pkgdir/DEBIAN/prerm
	#!/bin/bash
	rm -rf /usr/lib/u-boot/.UBOOT-NEED-UPDATE
	EOF

	chmod 755 $pkgdir/DEBIAN/prerm

	# Create board deb file
	echo "Building package: $pkgname"
	fakeroot dpkg-deb -b $pkgdir ${pkgdir}.deb
	mkdir -p $BUILD_DEBS/$VERSION/$KHADAS_BOARD
	cp ${pkgdir}.deb $BUILD_DEBS/$VERSION/$KHADAS_BOARD
	# Cleanup
	rm -rf ${pkgdir}.deb
	rm -rf $pkgdir
}
