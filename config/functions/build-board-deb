# Funcions:
# build_board_deb

## Build board deb package
build_board_deb() {
	local pkgname="${LINUX_BOARD_DEB}"

	if [ "$KHADAS_BOARD" == "Generic" ]; then
	    warning_msg "Ignore build common packages: $pkgname"
	    return 0
	fi

	info_msg "Build board deb: $pkgname"

	local pkgdir="$BUILD_IMAGES/.tmp/${pkgname}_${VERSION}_${DISTRIB_ARCH}"
	rm -rf $pkgdir
	mkdir -p $pkgdir/DEBIAN

	board_deb_dependencies=$(echo $PACKAGE_LIST_BOARD_DEPS)
	board_deb_dependencies=${board_deb_dependencies// /,}

	cat <<-EOF > $pkgdir/DEBIAN/control
	Package: $pkgname
	Version: $VERSION
	Architecture: $DISTRIB_ARCH
	Maintainer: Khadas <hello@khadas.com>
	Installed-Size: 1
	Replaces: alsa-utils, linux-firmware, watchdog, base-files, mpv, zram-config, haveged, initramfs-tools-core, ppp, linux-board-package-${DISTRIB_RELEASE,,}-vim1, linux-board-package-${DISTRIB_RELEASE,,}-vim2, linux-board-package-${DISTRIB_RELEASE,,}-vim3, linux-board-package-${DISTRIB_RELEASE,,}-vim3l, plymouth
	Section: kernel
	Priority: optional
	Recommends: ${board_deb_dependencies}
	Depends: bash, linux-base, u-boot-tools, initramfs-tools, fping
	Description: Fenix tweaks for ${DISTRIBUTION}-${DISTRIB_RELEASE} on $KHADAS_BOARD
	EOF

	# Set up pre install script
	cat <<-EOF > $pkgdir/DEBIAN/preinst
	#!/bin/bash

	rm -rf /etc/motd
	rm -rf /etc/update-motd.d/*

	# Disable power management on network manager
	if [ -f /etc/NetworkManager/conf.d/default-wifi-powersave-on.conf ]; then
		sed -i 's/wifi.powersave.*/wifi.powersave = 2/' /etc/NetworkManager/conf.d/default-wifi-powersave-on.conf
	else
		if [ -d /etc/NetworkManager/conf.d ]; then
			echo "[connection]" > /etc/NetworkManager/conf.d/default-wifi-powersave-on.conf
			echo "# Values are 0 (use default), 1 (ignore/don't touch), 2 (disable) or 3 (enable)." >> /etc/NetworkManager/conf.d/default-wifi-powersave-on.conf
			echo "wifi.powersave = 2" >> /etc/NetworkManager/conf.d/default-wifi-powersave-on.conf
		fi
	fi

	# Remove distro unattended-upgrades config
	[ -f "/etc/apt/apt.conf.d/50unattended-upgrades" ] && rm /etc/apt/apt.conf.d/50unattended-upgrades

	# Remove unused file
	[ -f /etc/apt/apt.conf.d/02compress-indexes ] && rm /etc/apt/apt.conf.d/02compress-indexes

	# make a backup since we are unconditionally overwriting this on update
	[ -f "/etc/default/cpufrequtils" ] && cp /etc/default/cpufrequtils /etc/default/cpufrequtils.dpkg-old

	# jammy default using zstd compression, force set initramfs compression to gzip
	sed -i "s/^COMPRESS=.*/COMPRESS=gzip/" /etc/initramfs-tools/initramfs.conf

	# Workaround for FAT32 /boot partition
	# exit if we are running chroot
	if [ "\$(stat -c %d:%i /)" != "\$(stat -c %d:%i /proc/1/root/.)" ]; then exit 0; fi

	check_fs() {
		boot_device=\$(mountpoint -d /boot)

		for file in /dev/* ; do
			CURRENT_DEVICE=\$(printf "%d:%d" \$(stat --printf="0x%t 0x%T" \$file))
			if [[ "\$CURRENT_DEVICE" = "\$boot_device" ]]; then
				boot_partition=\$file
				break
			fi
		done

		bootfstype=\$(blkid -s TYPE -o value \$boot_partition)
		if [ "\$bootfstype" = "vfat" ]; then
			rm -rf /boot/aml_boot.ini
			rm -rf /boot/boot.ini
			rm -rf /boot/extlinux/extlinux.conf
			rm -rf /boot/env.txt
			rm -rf /boot/uEnv.txt
			rm -rf /boot/fan.sh
			rm -rf /boot/s905_autoscript
			rm -rf /boot/aml_autoscript
			rm -rf /boot/aml_autoscript.zip
			rm -rf /boot/s905_autoscript.cmd
			rm -rf /boot/s905_autoscript.cmd.mainline
			rm -rf /boot/hdmi.sh
			rm -rf /boot/aml_autoscript.txt
			rm -rf /boot/boot.scr
			rm -rf /boot/rk3399_autoscript.cmd

			#rm -rf /boot/initrd.img-*
		fi
	}

	mountpoint -q /boot && check_fs

	# disable deprecated services
	[ -f "/lib/systemd/system/0hdmi.service" ] && rm /lib/systemd/system/0hdmi.service

	exit 0
	EOF

	chmod 755 $pkgdir/DEBIAN/preinst

	# Set up post remove script
	cat <<-EOF > $pkgdir/DEBIAN/postrm
	#!/bin/bash
	if [ remove = "\$1" ] || [ abort-install = "\$1" ]; then
		systemctl disable fenix-zram-config.service fenix-hardware-optimize.service >/dev/null 2>&1
	fi
	exit 0
	EOF

	chmod 755 $pkgdir/DEBIAN/postrm

	# Set up post install script
	cat <<-EOF > $pkgdir/DEBIAN/postinst
	#!/bin/bash
	# fix boot delay "waiting for suspend/resume device"
	if [ -f "/etc/initramfs-tools/initramfs.conf" ]; then
		if ! grep --quiet "RESUME=none" /etc/initramfs-tools/initramfs.conf; then
			echo "RESUME=none" >> /etc/initramfs-tools/initramfs.conf
		fi
	fi

	if [ ! -f "/etc/default/fenix-zram-config" ]; then
		mv /etc/default/fenix-zram-config.dpkg-dist /etc/default/fenix-zram-config
	fi

	# Bluez looks firmware in /etc/firmware/
	. /etc/fenix-release
	if [ "\$VENDOR" == "Amlogic" ]; then
		ln -sf /lib/firmware /etc/firmware
		if [[ "\$BOARD" =~ "VIM3" ]]; then
			if linux-version compare \`uname -r\` lt 5.10; then
				systemctl enable panel.service
				if [ "\$BOARD" == "VIM3" ]; then
					systemctl enable camera_isp_3a_server.service
				fi
			fi
		fi
	fi

	if [ "\$BOARD" == "VIM4" ]; then
		systemctl enable camera_isp_3a_server.service
	fi

	if [ "\$BOARD" == "Edge2" ]; then
		systemctl enable rockchip-isp.service
	fi

	# Patches used by hciattach
	ln -fs /lib/firmware/brcm/BCM43438A1.hcd /lib/firmware/brcm/BCM43430A1.hcd # AP6212
	ln -fs /lib/firmware/brcm/BCM4356A2.hcd /lib/firmware/brcm/BCM4354A2.hcd # AP6356S

	if [ "\$(stat -c %d:%i /)" != "\$(stat -c %d:%i /proc/1/root/.)" ]; then
		# In chroot
		if [ -f /boot/.next ]; then
			IS_MAINLINE_KERNEL="yes"
		fi
	else
		tmp=\$(cat /proc/cmdline)
		imagetype="\${tmp##*imagetype=}"
		imagetype="\${imagetype%% *}"
		khadas_board="\${tmp##*khadas_board=}"
		khadas_board="\${khadas_board%% *}"

		if grep -q INSTALL_TYPE /etc/fenix-release; then
			sed -i "s/INSTALL_TYPE=.*/INSTALL_TYPE=\$imagetype/" /etc/fenix-release
		fi
		sed -i "s/BOARD=.*/BOARD=\$khadas_board/" /etc/fenix-release
		linux_ver=\`uname -r\`
		if linux-version compare \$linux_ver ge 5.12; then
			IS_MAINLINE_KERNEL="yes"
		fi
	fi

	if [ "\$IS_MAINLINE_KERNEL" == "yes" ]; then
		# Mainline linux don't use such scripts now
		echo "#!/bin/sh" >  /etc/initramfs-tools/scripts/local-top/khadas_init.sh
		echo "exit 0" >> /etc/initramfs-tools/scripts/local-top/khadas_init.sh
		echo "#!/bin/bash" >  /usr/local/bin/hdmi.sh
		echo "exit 0" >> /usr/local/bin/hdmi.sh
		echo "#!/bin/bash" > /usr/local/bin/bluetooth-khadas.sh
		echo "exit 0" >> /usr/local/bin/bluetooth-khadas.sh
		echo "#!/bin/bash" > /usr/local/bin/bluetooth-power-fixup.sh
		echo "exit 0" >> /usr/local/bin/bluetooth-power-fixup.sh

		# Update fw_env.config for mainline linux
		echo "/dev/mmcblk1    0x27400000      0x10000" > /etc/fw_env.config

		# Disable deprecated services for mainline kernel
		[ -f "/lib/systemd/system/0hdmi.service" ] && rm /lib/systemd/system/0hdmi.service
		[ -f "/lib/systemd/system/bluetooth-khadas.service" ] && rm /lib/systemd/system/bluetooth-khadas.service
		[ -f "/lib/systemd/system/bluetooth-power-fixup.service" ] && rm /lib/systemd/system/bluetooth-power-fixup.service
		[ -L "/lib/systemd/system/reboot.target.wants/plymouth-reboot.service" ] && rm /lib/systemd/system/reboot.target.wants/plymouth-reboot.service
		[ -L "/lib/systemd/system/halt.target.wants/plymouth-halt.service" ] && rm /lib/systemd/system/halt.target.wants/plymouth-halt.service
		[ -L "/lib/systemd/system/poweroff.target.wants/plymouth-poweroff.service" ] && rm /lib/systemd/system/poweroff.target.wants/plymouth-poweroff.service

		# Update modules
		[ -f /etc/modules.mainline ] && mv /etc/modules.mainline /etc/modules
	else
		# FIXME Workaround for Bluetooth
		# Revert Workaround
		if [ -f /usr/lib/python3/dist-packages/blueman/plugins/mechanism/RfKill.py.backup ]; then
			mv /usr/lib/python3/dist-packages/blueman/plugins/mechanism/RfKill.py.backup /usr/lib/python3/dist-packages/blueman/plugins/mechanism/RfKill.py
		fi
		# Update modules
		[ -f /etc/modules.mainlne ] && rm /etc/modules.mainlne
		if [ "\$BOARD" == "VIM2" ]; then
			sed -i 's/mali//g' /etc/modules
		elif [ "\$BOARD" == "VIM3L" ]; then
			sed -i 's/iv009_isp_iq//g' /etc/modules
			sed -i 's/iv009_isp_lens//g' /etc/modules
			sed -i 's/iv009_isp_sensor//g' /etc/modules
			sed -i 's/iv009_isp//g' /etc/modules
		fi
		# Remove unused files for legacy kernel
		[ -f /var/lib/alsa/asound.state ] && rm /var/lib/alsa/asound.state
	fi

	# Fix env.txt / uEnv.txt
	rootdev=\$(sed -e 's/^.*root=//' -e 's/ .*\$//' < /proc/cmdline)
	partition_type=\$(sed -e 's/^.*partition_type=//' -e 's/ .*\$//' < /proc/cmdline)
	[ -f /boot/env.txt ] &&  sed -i s/rootdev=.*/rootdev=\$rootdev/g /boot/env.txt
	if [ -f /boot/uEnv.txt ]; then
		sed -i s/rootdev=root=.*/rootdev=root=\$rootdev/g /boot/uEnv.txt
		sed -i s/partitiontype=partition_type=.*/partitiontype=partition_type=\$partition_type/g /boot/uEnv.txt
	fi

	systemctl --no-reload enable fenix-zram-config.service fenix-hardware-optimize.service >/dev/null 2>&1

	# Setup plymouth
	case "\$1" in
		configure)
		update-alternatives \
			--install /usr/share/plymouth/themes/default.plymouth default.plymouth \
			/usr/share/plymouth/themes/fenix/fenix.plymouth 150

		ln -fs /usr/share/plymouth/themes/fenix/fenix.plymouth /etc/alternatives/default.plymouth

		if which update-initramfs >/dev/null 2>&1
		then
			update-initramfs -u
		fi
		;;

		abort-upgrade|abort-deconfigure|abort-remove)
		;;

		*)
		echo "\$0 called with unknown argument '\$1'" 1>&2
		exit 1
		;;
	esac

	exit 0
	EOF

	chmod 755 $pkgdir/DEBIAN/postinst

	# Copy premade common rootfs files
	rsync -aI $ROOT/archives/filesystem/common/* $pkgdir/

	# Copy board special rootfs files
	## Copy board common rootfs files
	if [[ "$KHADAS_BOARD" =~ VIM[1234] ]]; then
		## VIMs common rootfs files
		rsync -aI $ROOT/archives/filesystem/special/VIM-COMMON/* $pkgdir/
	fi
	## Copy board special rootfs files, these files will
	## overwrite the board common part files.
	rsync -aI $ROOT/archives/filesystem/special/$KHADAS_BOARD/* $pkgdir/

	if [ "$DISTRIBUTION" == "Ubuntu" ] && [ "$DISTRIB_TYPE" != "minimal" ]; then
		# Add fenix repository
		if [ "$BUILD_TYPE" == "release" ]; then
			mkdir -p $pkgdir/etc/apt/sources.list.d
			echo "deb http://dl.khadas.com/repos/${KHADAS_BOARD,,}/ ${DISTRIB_RELEASE} main" > $pkgdir/etc/apt/sources.list.d/fenix.list
		fi
	fi

#	# Fixup rc.local permission
#	chmod 755 $pkgdir/etc/rc.local

	# Copy boot scripts
	mkdir -p $pkgdir/boot
	if [ "$VENDOR" == "Amlogic" ]; then
		if [ -f $BOOT_SCRIPTS/$BOOT_SCRIPT_BOARD ]; then
			cp $BOOT_SCRIPTS/$BOOT_SCRIPT_BOARD $pkgdir/boot
			$UTILS_DIR/mkimage -A arm64 -O linux -T script -C none -a 0 -e 0 -n "$CHIP autoscript" -d $pkgdir/boot/$BOOT_SCRIPT_BOARD $pkgdir/boot/${BOOT_SCRIPT_BOARD%.cmd*}
			# For mainline u-boot to load autoscript
			cp $pkgdir/boot/${BOOT_SCRIPT_BOARD%.cmd*} $pkgdir/boot/boot.scr
		fi
		if [ -f $BOOT_SCRIPTS/$BOOT_SCRIPT_VENDOR ]; then
			cp $BOOT_SCRIPTS/$BOOT_SCRIPT_VENDOR $pkgdir/boot
			$UTILS_DIR/mkimage -A arm64 -O linux -T script -C none -a 0 -e 0 -n "$VENDOR autoscript" -d $pkgdir/boot/$BOOT_SCRIPT_VENDOR $pkgdir/boot/${BOOT_SCRIPT_VENDOR%.txt}
			cd $pkgdir/boot
			zip ${BOOT_SCRIPT_VENDOR%.txt}.zip ${BOOT_SCRIPT_VENDOR%.txt} ${BOOT_SCRIPT_VENDOR}
			cd -
		fi
	fi

	# Copy boot.ini
	if [ -f $BOOT_SCRIPTS/$BOOT_INI ]; then
		cp $BOOT_SCRIPTS/$BOOT_INI $pkgdir/boot/boot.ini
	fi

	# Copy extlinux
	if [ -f $BOOT_SCRIPTS/extlinux/$EXTLINUX_CONF ]; then
		mkdir -p $pkgdir/boot/extlinux
		cp $BOOT_SCRIPTS/extlinux/$EXTLINUX_CONF $pkgdir/boot/extlinux/extlinux.conf
	fi

	# Copy boot environment
	if [ -f $BOOT_ENV/$BOOT_ENV_FILE ]; then
		cp $BOOT_ENV/$BOOT_ENV_FILE $pkgdir/boot/env.txt
		# Extra boot environment
		if [ -f $BOOT_ENV/$BOOT_ENV_FILE_EXT ]; then
			cat $BOOT_ENV/$BOOT_ENV_FILE_EXT >> $pkgdir/boot/env.txt
		fi
	fi
	if [ -f $BOOT_ENV/$BOOT_ENV_FILE_NEW ]; then
		cp $BOOT_ENV/$BOOT_ENV_FILE_NEW $pkgdir/boot/uEnv.txt
	fi

	# Copy boot script for Rockchip platform
	if [ "$VENDOR" == "Rockchip" ]; then
		mkdir -p $pkgdir/boot
		if [ -f $BOOT_SCRIPTS/$BOOT_SCRIPT_BOARD ]; then
			cp $BOOT_SCRIPTS/$BOOT_SCRIPT_BOARD $pkgdir/boot
			$UTILS_DIR/mkimage -A arm64 -O linux -T script -C none -a 0 -e 0 -n "$CHIP autoscript" -d $pkgdir/boot/$BOOT_SCRIPT_BOARD $pkgdir/boot/boot.scr
		fi
	fi

	# Copy Wi-Fi & BT firmware
	if [ "$WIFI_MODEL" == "Broadcom" ]; then
		# Copy Wi-Fi firmware
		mkdir -p $pkgdir/lib/firmware
		cp -r $ROOT/archives/hwpacks/wlan-firmware/brcm $pkgdir/lib/firmware/

		# Copy Bluetooth firmware
		mkdir -p $pkgdir/usr/local/bin
		mkdir -p $pkgdir/lib/systemd/system
		cp -r $ROOT/archives/hwpacks/bluez/brcm_patchram_plus-$DISTRIB_ARCH $pkgdir/usr/local/bin/brcm_patchram_plus
		# Use patched hciattach
		cp -r $ROOT/archives/hwpacks/bluez/hciattach-$DISTRIB_ARCH $pkgdir/usr/local/bin/hciattach

		# FIXME AP6359SA and AP6398S use the same chipid and rev, so can't identify in DHD driver.
		# But AP6359SA only on VIM2 V12, and AP6398S only on Edge, VIM2 V14 and VIM3, so modify firmware here.
		if [[ "$KHADAS_BOARD" == "Edge" ]] || [[ "$KHADAS_BOARD" =~ "VIM3" ]]; then
			## Wi-Fi firmware
			mv $pkgdir/lib/firmware/brcm/fw_bcm4359c0_ag_apsta_ap6398s.bin $pkgdir/lib/firmware/brcm/fw_bcm4359c0_ag_apsta.bin
			mv $pkgdir/lib/firmware/brcm/fw_bcm4359c0_ag_ap6398s.bin $pkgdir/lib/firmware/brcm/fw_bcm4359c0_ag.bin
			mv $pkgdir/lib/firmware/brcm/fw_bcm4359c0_ag_p2p_ap6398s.bin $pkgdir/lib/firmware/brcm/fw_bcm4359c0_ag_p2p.bin
			# Need removed when Edge kernel updated
			if [[ "$KHADAS_BOARD" == "Edge" ]]; then
				mv $pkgdir/lib/firmware/brcm/nvram_ap6398s.txt $pkgdir/lib/firmware/brcm/nvram_ap6359sa.txt
			fi

			mv $pkgdir/lib/firmware/brcm/brcmfmac4359-sdio_ap6398s.bin $pkgdir/lib/firmware/brcm/brcmfmac4359-sdio.bin
			mv $pkgdir/lib/firmware/brcm/brcmfmac4359-sdio_ap6398s.txt $pkgdir/lib/firmware/brcm/brcmfmac4359-sdio.txt

			## Bluetooth firmware
			mv $pkgdir/lib/firmware/brcm/BCM4359C0_ap6398s.hcd $pkgdir/lib/firmware/brcm/BCM4359C0.hcd
		fi
	fi

	# Copy DP firmware
	if [ -d $ROOT/archives/hwpacks/dp/$VENDOR ]; then
		mkdir -p $pkgdir/lib/firmware/${VENDOR,,}
		cp -r $ROOT/archives/hwpacks/dp/$VENDOR/* $pkgdir/lib/firmware/${VENDOR,,}
	fi

	# Copy Amlogic SoC microcode firmware
	if [ "$VENDOR" == "Amlogic" ]; then
		mkdir -p $pkgdir/lib/firmware
		cp -r $ROOT/archives/hwpacks/video-firmware/Amlogic/$KHADAS_BOARD/* $pkgdir/lib/firmware/
	fi

	# Install bmp logo
	mkdir -p $pkgdir/usr/share/fenix/logo
	cp $ROOT/archives/logo/bmp/* $pkgdir/usr/share/fenix/logo
	# Install png logo
	cp $ROOT/archives/logo/png/*.png $pkgdir/usr/share/fenix/logo

	if [ "$KHADAS_BOARD" == "VIM1" ] && [ "$DISTRIB_RELEASE" == "bionic" ]; then
		# Blacklist lima.ko
		mkdir -p $pkgdir/etc/modprobe.d
		tee $pkgdir/etc/modprobe.d/lima.conf <<-EOF
		blacklist lima
		EOF
	fi

	if [ "$KHADAS_BOARD" == "VIM2" ] && [ "$DISTRIB_RELEASE" == "bionic" ]; then
		# Blacklist panfrost.ko
		mkdir -p $pkgdir/etc/modprobe.d
		tee $pkgdir/etc/modprobe.d/panfrost.conf <<-EOF
		blacklist panfrost
		EOF
	fi

	# Install asound.state for mainline kernel
	if [ -f $ROOT/archives/filesystem/blobs/asound.state/$KHADAS_BOARD/asound.state ]; then
		mkdir -p $pkgdir/var/lib/alsa/
		cp $ROOT/archives/filesystem/blobs/asound.state/$KHADAS_BOARD/asound.state $pkgdir/var/lib/alsa/
	fi

	# HACK for jammy
	if [ "$DISTRIB_RELEASE" == "jammy" ]; then
		mv $pkgdir/usr/share/initramfs-tools/scripts/local.jammy $pkgdir/usr/share/initramfs-tools/scripts/local
	else
		rm -rf $pkgdir/usr/share/initramfs-tools/scripts/local.jammy
	fi

	# Trigger uInitrd creation after installation, to apply
	# /etc/initramfs/post-update.d/99-uboot
	cat <<-EOF > $pkgdir/DEBIAN/triggers
	activate update-initramfs
	EOF

	# configure MIN / MAX speed for cpufrequtils
	cat <<-EOF > $pkgdir/etc/default/cpufrequtils
	# WARNING: this file will be replaced on board support package upgrade
	ENABLE=true
	MIN_SPEED=$CPUMIN
	MAX_SPEED=$CPUMAX
	GOVERNOR=$GOVERNOR
	EOF

	# Config file
	cat <<-EOF > $pkgdir/etc/fenix-release
	# PLEASE DO NOT EDIT THIS FILE
	BOARD=$KHADAS_BOARD
	VENDOR=$VENDOR
	VERSION=$VERSION
	ARCH=$DISTRIB_ARCH
	INITRD_ARCH=arm64
	INSTALL_TYPE=$INSTALL_TYPE
	IMAGE_VERSION=$IMAGE_VERSION
	################ GIT VERSION ################
	UBOOT_GIT_VERSION=`git -C "$UBOOT_VENDOR_DIR" describe --abbrev=7 --dirty --always --tags 2> /dev/null`
	LINUX_GIT_VERSION=`git -C "$LINUX_VENDOR_DIR" describe --abbrev=7 --dirty --always --tags 2> /dev/null`
	FENIX_GIT_VERSION=`git -C "$ROOT" describe --abbrev=7 --dirty --always --tags 2> /dev/null`
	#############################################
	EOF

	if [ "$KHADAS_BOARD" == "VIM4" ]; then
		sed -i '/INSTALL_TYPE/d' $pkgdir/etc/fenix-release
	fi

	case $DISTRIB_RELEASE in
		buster)
			mkdir -p $pkgdir/usr/lib/NetworkManager/conf.d/
			cp $ROOT/archives/filesystem/bsp/zz-override-wifi-powersave-off.conf $pkgdir/usr/lib/NetworkManager/conf.d/
			cp $ROOT/archives/filesystem/bsp/10-override-random-mac.conf $pkgdir/usr/lib/NetworkManager/conf.d/
		;;

		bionic|focal|jammy)
			mkdir -p $pkgdir/usr/lib/NetworkManager/conf.d/
			cp $ROOT/archives/filesystem/bsp/zz-override-wifi-powersave-off.conf $pkgdir/usr/lib/NetworkManager/conf.d/
			cp $ROOT/archives/filesystem/bsp/10-override-random-mac.conf $pkgdir/usr/lib/NetworkManager/conf.d/
		;;

	esac

	# Add dependencies file
	cat <<-EOF > $pkgdir/etc/fenix-board-dependencis
	FENIX_BOARD_DEPENDENCIES="$(echo $PACKAGE_LIST_BOARD_DEPS)"
	EOF

	# Create board deb file
	info_msg "Building package: $pkgname"
	fakeroot dpkg-deb -b $pkgdir ${pkgdir}.deb
	mkdir -p $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}
	cp ${pkgdir}.deb $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}
	# Cleanup
	rm -rf ${pkgdir}.deb
	rm -rf $pkgdir
}
