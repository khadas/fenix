# Functions:
# unset_package_vars
# download_package
# extract_package
# clean_package
# unpack_package
# build_package

unset_package_vars() {
	unset PKG_NAME
	unset PKG_VERSION
	unset PKG_VERSION_SHORT
	unset PKG_REV
	unset PKG_ARCH
	unset PKG_LICENSE
	unset PKG_SITE
	unset PKG_URL
	unset PKG_SOURCE_DIR
	unset PKG_SOURCE_NAME
	unset PKG_NEED_BUILD
	unset PKG_SHA256
}

## Download package
## S1 package
download_package() {

	local PKG="$1"
	local STAMP_URL
	local STAMP_SHA
	local WGET_CMD

	mkdir -p $DOWNLOAD_PKG_DIR/$PKG
	cd $DOWNLOAD_PKG_DIR/$PKG

	unset_package_vars
	if [ -f "$PKGS_DIR/$PKG/package.mk" ]; then
		. $PKGS_DIR/$PKG/package.mk
		if [ "$PKG_NAME" != "$PKG" ]; then
			error_msg "Package name mismatch! '$PKG_NAME' != '$PKG'"
			return -1
		fi
	else
		error_msg "Package '$PKG' doesn't exist!"
		return -1
	fi

	STAMP_URL="$PKG_SOURCE_NAME.url"
	STAMP_SHA="$PKG_SOURCE_NAME.sha256"
#	WGET_CMD="wget --timeout=30 --tries=3 --passive-ftp --no-check-certificate -O $PKG_SOURCE_NAME"
	WGET_CMD="wget --timeout=30 --tries=3 --passive-ftp --no-check-certificate -O $PKG_SOURCE_NAME"

	# Check
	if [ -f $PKG_SOURCE_NAME ]; then
		if [ "$(cat $STAMP_URL 2>/dev/null)" == "${PKG_URL}" ]; then
			[ -z "${PKG_SHA256}" -o "$(cat $STAMP_SHA 2>/dev/null)" == "${PKG_SHA256}" ] && return 0
		fi
	fi

	rm -f $STAMP_URL $STAMP_SHA

	# Download
	local NBWGET=10
	while [ $NBWGET -gt 0 ]; do
		rm -rf $PKG_SOURCE_NAME

		if $WGET_CMD "$PKG_URL"; then
			CALC_SHA256="$(sha256sum $PKG_SOURCE_NAME | cut -d" " -f1)"
			[ -z "${PKG_SHA256}" -o "${PKG_SHA256}" == "${CALC_SHA256}" ] && break

			error_msg "Incorrect checksum calculated on downloaded file: got ${CALC_SHA256}, wanted ${PKG_SHA256}"
		fi
		NBWGET=$((NBWGET - 1))
	done

	if [ $NBWGET -eq 0 ]; then
		error_msg "Cant't get $PKG_NAME sources : $PKG_URL\n Try later !!"
		return -1
	else
		echo "Calculated checksum is: ${CALC_SHA256}"
		echo "${PKG_URL}" > $STAMP_URL
		echo "${CALC_SHA256}" > $STAMP_SHA
	fi
}

## Extract package
## $1 package
## $2 target dir
extract_package() {
	if [ -z "$2" ]; then
		echo "usage: $0 package_name target_dir"
		return -1
	fi

	[ -z "$PKG_URL" -o -z "$PKG_SOURCE_NAME" ] && return -1
	[ ! -d "$DOWNLOAD_PKG_DIR/$1" -o ! -d "$2" ] && return -1

	printf "${GREEN}Extracting '$PKG_SOURCE_NAME' to '$2'...${ENDCOLOR}\n" ' '

	for pattern in .tar.gz .tar.xz .tar.bz2 .tgz .txz .tbz .7z .zip; do
		if [[ $PKG_SOURCE_NAME =~ ${pattern//./\\.}$ ]]; then
			f="$DOWNLOAD_PKG_DIR/$1/$PKG_SOURCE_NAME"
			if [ ! -f $f ]; then
				error_msg "error: File $PKG_SOURCE_NAME doesn't exist in package $1 downloads directory"
				return -1
			fi
			case $PKG_SOURCE_NAME in
				*.tar)
					tar xf $f -C $2
					;;
				*.tar.bz2 | *.tbz)
					tar xjf $f -C $2
					;;
				*.tar.gz | *.tgz)
					tar xzf $f -C $2
					;;
				*.tar.xz | *.txz)
					tar xJf $f -C $2
					;;
				*.7z)
					mkdir -p $2/$1
					7z x -o$2/$1 $f
					;;
				*.zip)
					unzip -q $f -d $2
					;;
				*.diff | *.patch)
					cat $f | patch -d $2 -p1
					;;
				*.diff.bz2 | *.patch.bz2 | patch-*.bz2)
					bzcat $f | patch -d $2 -p1
					;;
				*.diff.gz | *.patch.gz | patch-*.gz)
					zcat $f | patch -d $2 -p1
					;;
				*)
					cp -pPR $f $2
					;;
			esac
			break
		fi
	done
}

## Clean package
## $1 pakage
clean_package() {

	for i in $BUILD/$1-*; do
		if [ -d $i -a -f "$i/.fenix-unpack" ] ; then
			. "$i/.fenix-unpack"
			if [ "$STAMP_PKG_NAME" = "$1" ]; then
				printf "${BOLDRED}*${ENDCOLOR} ${RED}Removing $i ...${ENDCOLOR}\n" ' '
				rm -rf $i
			fi
		else
			# force clean if no stamp found (previous unpack failed)
			printf "${BOLDRED}*${ENDCOLOR} ${RED}Removing $i ...${ENDCOLOR}\n" ' '
			rm -rf $i
		fi
	done


	return 0
}

## Unpack package
## $1 package name
unpack_package() {

	local PKG="$1"
	local STAMP
	local STAMP_DEPENDS
	local PKG_BUILD
	local PKG_DIR

	download_package "$PKG"

	mkdir -p $BUILD

	PKG_DIR="$PKGS_DIR/$PKG"
	PKG_BUILD="$BUILD/${PKG_NAME}-${PKG_VERSION}"
	STAMP=$PKG_BUILD/.fenix-unpack
	STAMP_DEPENDS="$PKG_DIR"

	local PKG_DEEPMD5=
	for i in $BUILD/$PKG-*; do
		if [ -d $i -a -f "$i/.fenix-unpack" ] ; then
			. "$i/.fenix-unpack"
			if [ "$STAMP_PKG_NAME" = "$PKG" ]; then
				[ -z "${PKG_DEEPMD5}" ] && PKG_DEEPMD5=$(find $STAMP_DEPENDS -exec md5sum {} \; 2>/dev/null | sort | md5sum | cut -d" " -f1)
				if [ ! "$PKG_DEEPMD5" = "$STAMP_PKG_DEEPMD5" ] ; then
					clean_package $PKG
				fi
			fi
		fi
	done

	if [ -d "$PKG_BUILD" -a ! -f "$STAMP" ]; then
		clean_package $PKG
	fi

	[ -f "$STAMP" ] && return 0

	if [ -d "$DOWNLOAD_PKG_DIR/$PKG" ]; then
		# unset functions
		unset -f pre_unpack
		unset -f unpack
		unset -f post_unpack
		unset -f pre_patch
		unset -f post_patch

		. $PKGS_DIR/$PKG/package.mk

		if [ "$(type -t pre_unpack)" = "function" ]; then
			pre_unpack
		fi

		if [ "$(type -t unpack)" = "function" ]; then
			unpack
		else
			if [ -n "$PKG_URL" ]; then
				extract_package $PKG $BUILD
			fi
		fi

		if [ ! -d $BUILD/$PKG_NAME-$PKG_VERSION ]; then
			if [ -n "$PKG_SOURCE_DIR" ]; then
				mv $BUILD/$PKG_SOURCE_DIR $BUILD/$PKG_NAME-$PKG_VERSION
			elif [ -d $BUILD/$PKG_NAME-$PKG_VERSION* ]; then
				mv $BUILD/$PKG_NAME-$PKG_VERSION* $BUILD/$PKG_NAME-$PKG_VERSION
			fi
		fi

		if [ -d "$PKG_DIR/sources" ]; then
			[ ! -d "$BUILD/${PKG_NAME}-${PKG_VERSION}" ] && mkdir -p $BUILD/${PKG_NAME}-${PKG_VERSION}
			cp -PRf $PKG_DIR/sources/* $BUILD/${PKG_NAME}-${PKG_VERSION}
		fi

		if [ "$(type -t post_unpack)" = "function" ]; then
			post_unpack
		fi

		if [ "$(type -t pre_patch)" = "function" ]; then
			pre_patch
		fi

		for i in $PKG_DIR/patches/$PKG_NAME-*.patch \
				 $PKG_DIR/patches/$PKG_VERSION/*.patch; do

			if [ -f "$i" ]; then
				if [ -n "$(grep -E '^GIT binary patch$' $i)" ]; then
					cat $i | git apply --directory=`echo "$PKG_BUILD" | cut -f1 -d\ ` -p1 --verbose --whitespace=nowarn --unsafe-paths
				else
					cat $i | patch -d `echo "$PKG_BUILD" | cut -f1 -d\ ` -p1
				fi
			fi
		done

		if [ "$(type -t post_patch)" = "function" ]; then
			post_patch
		fi

		PKG_DEEPMD5=$(find $STAMP_DEPENDS -exec md5sum {} \; 2>/dev/null | sort | md5sum | cut -d" " -f1)
		for i in PKG_NAME PKG_DEEPMD5; do
			echo "STAMP_$i=\"${!i}\"" >> $STAMP
		done
	fi

	return 0
}

## Build package
## $1 package
build_package() {

	if [ -z "$1" ]; then
		echo "usage: $0 package_name"
		return -1
	fi

	local STAMPS
	local PKG_DIR
	local PKG_BUILD
	local STAMP_DEPENDS
	local PACKAGE_NAME
	local TARGET

	PACKAGE_NAME=$(echo $1 | awk -F : '{print $1}')
	TARGET=$(echo $1 | awk -F : '{print $2}')
	if [ -z "$TARGET" ]; then
		TARGET="target"
	fi

	if [ ! -f $PKGS_DIR/$PACKAGE_NAME/package.mk ]; then
		error_msg "$1: no package.mk file found!"
		return -1
	fi


	unpack_package $PACKAGE_NAME

	STAMPS=$BUILD/.stamps
	PKG_DIR="$PKGS_DIR/$PACKAGE_NAME"
	PKG_BUILD="$BUILD/${PKG_NAME}-${PKG_VERSION}"

	mkdir -p $STAMPS/$PKG_NAME
	STAMP=$STAMPS/$PKG_NAME/build_$TARGET

	STAMP_DEPENDS="$PKG_DIR"

	if [ -f $STAMP ] ; then
		. $STAMP
		PKG_DEEPMD5=$(find $STAMP_DEPENDS -exec md5sum {} \; 2>/dev/null | sort | md5sum | cut -d" " -f1)
		if [ ! "$PKG_DEEPMD5" = "$STAMP_PKG_DEEPMD5" ] ; then
			rm -f $STAMP
		fi
	fi

	if [ ! -f $STAMP ]; then
		# unset functions
		unset -f pre_build_target
		unset -f pre_make_target
		unset -f make_target
		unset -f post_make_target
		unset -f makeinstall_target

		unset -f pre_build_host
		unset -f pre_make_host
		unset -f make_host
		unset -f post_make_host
		unset -f makeinstall_host

		. $PKG_DIR/package.mk


		if [ "$(type -t pre_build_$TARGET)" = "function" ]; then
			pre_build_$TARGET
		fi

		if [ ! -d $PKG_BUILD ] ; then
			mkdir -p $PKG_BUILD
		fi

		cd $PKG_BUILD

		if [ "$(type -t pre_make_$TARGET)" = "function" ]; then
			pre_make_$TARGET
		fi

		if [ "$(type -t make_$TARGET)" = "function" ]; then
			make_$TARGET
		fi

		if [ "$(type -t post_make_$TARGET)" = "function" ]; then
			post_make_$TARGET
		fi

		if [ "$(type -t makeinstall_$TARGET)" = "function" ]; then
			makeinstall_$TARGET
		fi

		PKG_DEEPMD5=$(find $STAMP_DEPENDS -exec md5sum {} \; 2>/dev/null | sort | md5sum | cut -d" " -f1)
		for i in PKG_NAME PKG_DEEPMD5; do
			echo "STAMP_$i=\"${!i}\"" >> $STAMP
		done
	fi
}
