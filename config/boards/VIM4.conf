#!/bin/bash

#= Khadas VIM4 with Amlogic A311D2 SoC

SUPPORTED_UBOOT=("2019.01")
SUPPORTED_UBOOT_DESC=("U-boot 2019.01")
SUPPORTED_LINUX=("5.4")
SUPPORTED_LINUX_DESC=("Linux 5.4")

####################################
## Include VIM series common part
####################################
source config/boards/VIM.inc

case "$UBOOT" in
	2019.01)
		#UBOOT_DEFCONFIG="kvim4_defconfig"
		UBOOT_DEFCONFIG="${UBOOT_DEFCONFIG:-kvim4_defconfig}"
		UBOOT_GIT_BRANCH="${UBOOT_GIT_BRANCH:-khadas-vims-v2019.01}"
		CROSS_COMPILE_PATH="$TOOLCHAINS/gcc-riscv-none-embed/bin/"
		export CROSS_COMPILE_PATH
		;;
	mainline)
		UBOOT_DEFCONFIG=""
		UBOOT_GIT_BRANCH="master"
		;;
esac

UBOOT_IMAGE_FILES="u-boot.bin.signed u-boot.bin.sd.bin.signed u-boot.bin.spi.bin.signed"

case "$LINUX" in
	mainline)
		LINUX_DTB=""
		LINUX_GIT_BRANCH="master"
		LINUX_DEFCONFIG="${LINUX_DEFCONFIG:-defconfig}"
		SERIALCON="ttyAML0"
		GPU_VER=""
		GPU_PLATFORM=""
		GPU_TYPE=""
		MODESETTING_CONF=""
		;;
	5.4)
		LINUX_DTB="arch/arm64/boot/dts/amlogic/kvim4.dtb"
		LINUX_GIT_BRANCH="${LINUX_GIT_BRANCH:-khadas-vims-5.4.y}"
		LINUX_DEFCONFIG="${LINUX_DEFCONFIG:-kvims_defconfig}"
		SERIALCON="ttyS0"
		GPU_VER="25p0"
		if [ "$DISTRIB_TYPE" != "server" ]; then
			GPU_PLATFORM="wayland"
		else
			GPU_PLATFORM="gbm"
		fi
		GPU_TYPE="gondul"
		MODESETTING_CONF=""
		;;
esac

####
GPU_MODEL="arm-mali-bifrost-g52" # Mali G52 MP8(8EE)

CPUMIN=500000
CPUMAX=2208000
GOVERNOR=conservative

BOOTFS_TYPE="ext4"

BOOT_ENV_FILE=""
BOOT_SCRIPT_BOARD=""
BOOT_SCRIPT_VENDOR=""
BOOT_INI=""
BOOT_ENV_FILE_NEW="uEnv.txt"
BOOT_ENV_FILE_EXT=""
EXTLINUX_CONF="VIM4_extlinux.conf"

#### Packing image
IMAGE_PACKAGE_CONF=package_t7.conf
IMAGE_PLATFORM_CONF=platform_t7.conf

####################################
# Overwrite function in config/boards/VIM.inc
uboot_custom_postprocess() {
	# Cleanup old binaries
	rm -rf $UBOOT_IMAGE_DIR
	source fip/mk_script.sh kvim4 $UBOOT_DIR

	# Generate U-Boot for SPI Flash
	info_msg "Generate U-Boot for SPI Flash..."
	S0=0
	B0=0x3f800
	D01=0
	D02=0x040000

	S1=0x00040000
	B1=0x13000
	D11=0x080000
	D12=$((D11+B1))

	S2=0x00053000
	B2=0x11000
	D21=0x0a6000
	D22=$((D21+B2))

	S3=0x00064000
	B3=0x40000
	D31=0x0c8000
	D32=$((D31+B3))

	S4=0x000a4000
	B4=0x275000
	D41=0x148000

	IF=$UBOOT_DIR/fip/_tmp/u-boot.bin.signed
	OF=$UBOOT_DIR/fip/_tmp/u-boot.bin.spi.bin.signed
	# bl2
	dd if="$IF" skip=$((S0/512)) seek=$((D01/512)) count=$((B0/512)) bs=512 conv=fsync,notrunc of="$OF"
	dd if="$IF" skip=$((S0/512)) seek=$((D02/512)) count=$((B0/512)) bs=512 conv=fsync,notrunc of="$OF"
	# bl2e
	dd if="$IF" skip=$((S1/512)) seek=$((D11/512)) count=$((B1/512)) bs=512 conv=fsync,notrunc of="$OF"
	dd if="$IF" skip=$((S1/512)) seek=$((D12/512)) count=$((B1/512)) bs=512 conv=fsync,notrunc of="$OF"
	# bl2x
	dd if="$IF" skip=$((S2/512)) seek=$((D21/512)) count=$((B2/512)) bs=512 conv=fsync,notrunc of="$OF"
	dd if="$IF" skip=$((S2/512)) seek=$((D22/512)) count=$((B2/512)) bs=512 conv=fsync,notrunc of="$OF"
	# ddrfip
	dd if="$IF" skip=$((S3/512)) seek=$((D31/512)) count=$((B3/512)) bs=512 conv=fsync,notrunc of="$OF"
	dd if="$IF" skip=$((S3/512)) seek=$((D32/512)) count=$((B3/512)) bs=512 conv=fsync,notrunc of="$OF"
	# devfip
	dd if="$IF" skip=$((S4/512)) seek=$((D41/512)) count=$((B4/512)) bs=512 conv=fsync,notrunc of="$OF"
}

## Write u-boot
write_uboot_platform()
{
	dd if="$1/u-boot.bin.sd.bin.signed" of="$2" conv=fsync,notrunc bs=442 count=1 > /dev/null 2>&1
	dd if="$1/u-boot.bin.sd.bin.signed" of="$2" conv=fsync,notrunc bs=512 skip=1 seek=1 > /dev/null 2>&1
}

## Write u-boot for vendor u-boot
write_uboot_platform_ext()
{
	dd if="$1/u-boot.bin.signed" of=/dev/bootloader conv=fsync bs=512 seek=1 > /dev/null 2>&1
	dd if="$1/u-boot.bin.signed" of=/dev/mmcblk0boot0 conv=fsync bs=512 seek=1 > /dev/null 2>&1
	dd if="$1/u-boot.bin.signed" of=/dev/mmcblk0boot1 conv=fsync bs=512 seek=1 > /dev/null 2>&1
}

setup_write_uboot_platform()
{
	local tmp=$(cat /proc/cmdline)
	local bootsource="${tmp##*boot_source=}"
	local partition_type="${tmp##*partition_type=}"
	bootsource="${bootsource%% *}"
	partition_type="${partition_type%% *}"

	if [ "$bootsource" == "sd" ]; then
		DEVICE="/dev/mmcblk1"
	elif [ "$bootsource" == "emmc" ]; then
		if [ "$partition_type" == "generic" ]; then
			DEVICE="/dev/mmcblk0"
		else
			DEVICE="VENDOR"
		fi
	fi
}

## tweaks for platform
tweaks_platform() {
	echo "#Serial console allow root" >> $ROOTFS_TEMP/etc/securetty
	echo "ttyAML0" >> $ROOTFS_TEMP/etc/securetty

	# Enable services
	eval 'LC_ALL=C LANG=C chroot $ROOTFS_TEMP /bin/bash -c "systemctl --no-reload enable fan.service"'

	if [ "$LINUX" != "mainline" ]; then
		eval 'LC_ALL=C LANG=C chroot $ROOTFS_TEMP /bin/bash -c "systemctl --no-reload enable bluetooth-khadas.service camera_isp_3a_server.service"'
	fi

	if [ "$DISTRIB_TYPE" != "server" ] && [ "$LINUX" != "mainline" ]; then
		eval 'LC_ALL=C LANG=C chroot $ROOTFS_TEMP /bin/bash -c "systemctl --no-reload enable panel.service"'
	fi

	# Create boot links
	if [ "$INSTALL_TYPE" == "EMMC" ]; then
		eval 'LC_ALL=C LANG=C chroot $ROOTFS_TEMP /bin/bash -c "ln -fs /boot/Image Image"'
		eval 'LC_ALL=C LANG=C chroot $ROOTFS_TEMP /bin/bash -c "ln -fs /boot/initrd.img initrd.img"'
		eval 'LC_ALL=C LANG=C chroot $ROOTFS_TEMP /bin/bash -c "ln -fs /boot/dtb/$(basename $LINUX_DTB) dtb.img"'
		eval 'LC_ALL=C LANG=C chroot $ROOTFS_TEMP /bin/bash -c "ln -fs /boot/dtb dtb"'
	else
		# Setup default DTB for SD/USB images
		eval 'LC_ALL=C LANG=C chroot $ROOTFS_TEMP /bin/bash -c "ln -fs dtb/rockchip/$(basename $LINUX_DTB) /boot/dtb.img"'
	fi
}

## Build deb packages for platform
build_deb_packages_platform() {

	if [ "$DISTRIB_TYPE" == "minimal" ]; then
		warning_msg "Ignore build platform packages for minimal image."
		return 0
	fi

	if [ "$LINUX" == "5.4" ] && [ "$DISTRIBUTION" == "Ubuntu" ]; then
		info_msg "Building mali-debs package..."
		# FIXME
		# remove build stamp to force build for other arch
		rm -rf $BUILD/.stamps/mali-debs
		build_package "mali-debs:target"


		info_msg "Building OPTEE userspace package..."
		# FIXME
		# remove build stamp to force build for other arch
		rm -rf $BUILD/.stamps/optee_userspace_deb_aml
		build_package "optee_userspace_deb_aml:target"

		info_msg "Building OPTEE video firmware package..."
		# FIXME
		# remove build stamp to force build for other arch
		rm -rf $BUILD/.stamps/optee_video_firmware_deb_aml
		build_package "optee_video_firmware_deb_aml:target"

		info_msg "Building libion package..."
		# FIXME
		# remove build stamp to force build for other arch
		rm -rf $BUILD/.stamps/libion_deb_aml
		build_package "libion_deb_aml:target"

		info_msg "Building libge2d package..."
		# FIXME
		# remove build stamp to force build for other arch
		rm -rf $BUILD/.stamps/libge2d_deb_aml
		build_package "libge2d_deb_aml:target"

		info_msg "Building libmultienc  package..."
		# FIXME
		# remove build stamp to force build for other arch
		rm -rf $BUILD/.stamps/libmultienc_deb_aml
		build_package "libmultienc_deb_aml:target"

		info_msg "Building libjpegenc package..."
		# FIXME
		# remove build stamp to force build for other arch
		rm -rf $BUILD/.stamps/libjpegenc_deb_aml
		build_package "libjpegenc_deb_aml:target"

		info_msg "Building edid-decode-deb packages..."
		# FIXME
		# remove build stamp to force build for other arch
		rm -rf $BUILD/.stamps/edid-decode-deb
		build_package "edid-decode-deb:target"
	fi

	if [ "$LINUX" == "5.4" ] && [ "$DISTRIB_RELEASE" == "jammy" ] && [ "$DISTRIB_TYPE" == "gnome" ]; then
		info_msg "Building xwayland-deb ..."
		# FIXME
		# remove build stamp to force build for other arch
		rm -rf $BUILD/.stamps/xwayland-deb
		build_package "xwayland-deb:target"

		info_msg "Building mutter-debs ..."
		# FIXME
		# remove build stamp to force build for other arch
		rm -rf $BUILD/.stamps/mutter-debs
		build_package "mutter-debs:target"
	fi
}

## Install deb packages for platform
install_deb_packages_platform() {

	if [ "$DISTRIB_TYPE" == "minimal" ]; then
		warning_msg "Ignore install platform packages for minimal image."
		return 0
	fi

	if [ "$LINUX" == "5.4" ] && [ "$DISTRIBUTION" == "Ubuntu" ]; then
		info_msg "Installing mali-debs package ..."
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/mali-debs/${GPU_PLATFORM}/*.deb

		info_msg "Installing OPTEE userspace package..."
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/optee_userspace_deb_aml/*.deb

		info_msg "Installing OPTEE video firmware package..."
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/optee_video_firmware_deb_aml/*.deb

		info_msg "Installing libion package..."
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/libion_deb_aml/*.deb

		info_msg "Installing libge2d package..."
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/libge2d_deb_aml/*.deb

		info_msg "Installing libmultienc package..."
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/libmultienc_deb_aml/*.deb

		info_msg "Installing libjpegenc package..."
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/libjpegenc_deb_aml/*.deb

		info_msg "Installing edid-decode-deb packages..."
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/edid-decode-deb/*.deb
	fi

	if [ "$LINUX" == "5.4" ] && [ "$DISTRIB_RELEASE" == "jammy" ] && [ "$DISTRIB_TYPE" == "gnome" ]; then
		info_msg "Installing xwayland-deb packages ..."
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/xwayland-deb/*.deb

		info_msg "Installing mutter-debs packages ..."
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mutter-debs/mutter-common_*.deb
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mutter-debs/mutter_*.deb
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mutter-debs/libmutter-10-0_*.deb
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mutter-debs/gir1.2-mutter-10_*.deb
	fi
}
