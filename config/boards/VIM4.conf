#!/bin/bash

#= Khadas VIM4 with Amlogic A311D2 SoC

SUPPORTED_UBOOT=("2019.01")
SUPPORTED_UBOOT_DESC=("U-boot 2019.01")
declare -A SUPPORTED_LINUX SUPPORTED_LINUX_DESC
SUPPORTED_LINUX["2019.01"]="5.15"
SUPPORTED_LINUX_DESC["2019.01"]="'Linux 5.15'"

DISTRIBUTION_ARRAY=("Ubuntu" "Debian")
DISTRIBUTION_ARRAY_DESC=("Ubuntu" "Debian")
Ubuntu_RELEASE_ARRAY=("jammy" "noble")
Ubuntu_RELEASE_VERSION_ARRAY=("22.04" "24.04")
Ubuntu_RELEASE_ARRAY_DESC=("Ubuntu 22.04" "Ubuntu 24.04")
Debian_RELEASE_ARRAY=("bullseye" "bookworm")
Debian_RELEASE_VERSION_ARRAY=("11" "12")
Debian_RELEASE_ARRAY_DESC=("Debian 11" "Debian 12")
DISTRIB_ARCH_ARRAY=("arm64")
Ubuntu_TYPE_ARRAY=("server" "minimal" "gnome")
Ubuntu_TYPE_ARRAY_DESC=("Headless Image With Essential Packages"\
						"Minimal Image With Very Basic Packages"\
						"Desktop Image With GNOME Desktop")
Debian_TYPE_ARRAY=("server" "minimal" "gnome")
Debian_TYPE_ARRAY_DESC=("Headless Image With Essential Packages"\
						"Minimal Image With Very Basic Packages"\
						"Desktop Image With GNOME Desktop")
INSTALL_TYPE_ARRAY=("EMMC" "SD-USB")
INSTALL_TYPE_ARRAY_DESC=("Image For Writing to eMMC Storage With USB Burning Tool"\
						 "Image For Writing to SD/USB Storage")

####################################
## Include VIM series common part
####################################
source config/boards/VIM.inc

case "$UBOOT" in
	2019.01)
		#UBOOT_DEFCONFIG="kvim4_defconfig"
		UBOOT_DEFCONFIG="${UBOOT_DEFCONFIG:-kvim4_defconfig}"
		UBOOT_GIT_BRANCH="${UBOOT_GIT_BRANCH:-khadas-vims-v2019.01}"
		CROSS_COMPILE_PATH="$TOOLCHAINS/gcc-riscv-none-embed/bin/"
		export CROSS_COMPILE_PATH
		;;
	mainline)
		UBOOT_DEFCONFIG=""
		UBOOT_GIT_BRANCH="master"
		;;
esac

UBOOT_IMAGE_FILES="u-boot.bin.signed u-boot.bin.sd.bin.signed u-boot.bin.spi.bin.signed"

case "$LINUX" in
	mainline)
		LINUX_DTB=""
		LINUX_GIT_BRANCH="master"
		LINUX_DEFCONFIG="${LINUX_DEFCONFIG:-defconfig}"
		SERIALCON="ttyAML0"
		GPU_VER=""
		GPU_PLATFORM=""
		GPU_TYPE=""
		MODESETTING_CONF=""
		;;
	5.15)
		LINUX_DTB="$LINUX_COMMON_DRIVERS_DIR/arch/arm64/boot/dts/amlogic/kvim4n.dtb"
		LINUX_GIT_BRANCH="${LINUX_GIT_BRANCH:-khadas-vims-5.15.y}"
		LINUX_DEFCONFIG="${LINUX_DEFCONFIG:-kvims_defconfig}"
		LINUX_DEFCONFIG_DIR="$LINUX_COMMON_DRIVERS_DIR/arch/arm64/configs"
		LINUX_COMMON_DRIVERS_GIT_BRANCH="${LINUX_COMMON_DRIVERS_GIT_BRANCH:-khadas-vims-5.15.y}"
		SERIALCON="ttyS0"
		GPU_VER="25p0"
		if [ "$DISTRIB_TYPE" != "server" ]; then
			GPU_PLATFORM="wayland"
		else
			GPU_PLATFORM="gbm"
		fi
		GPU_TYPE="gondul"
		MODESETTING_CONF=""
		;;
esac

####
GPU_MODEL="arm-mali-bifrost-g52" # Mali G52 MP8(8EE)

CPUMIN=500000
CPUMAX=2208000
GOVERNOR=conservative

BOOTFS_TYPE="ext4"

BOOT_ENV_FILE=""
BOOT_SCRIPT_BOARD=""
BOOT_SCRIPT_VENDOR=""
BOOT_INI=""
BOOT_ENV_FILE_NEW="VIM4_uEnv.txt"
BOOT_ENV_FILE_EXT=""
EXTLINUX_CONF="VIM4_extlinux.conf"

#### Packing image
IMAGE_PACKAGE_CONF=package_t7.conf
IMAGE_PLATFORM_CONF=platform_t7.conf

####################################
uboot_custom_build() {
	# Cleanup old binaries
	info_msg "U-Boot custom build ..."
	rm -rf $UBOOT_IMAGE_DIR
	source fip/mk_script.sh kvim4 $UBOOT_DIR
}

# Overwrite function in config/boards/VIM.inc
uboot_custom_postprocess() {
	# Generate U-Boot for SPI Flash
	info_msg "Generate U-Boot for SPI Flash..."
	S0=0
	B0=0x3f800
	D01=0
	D02=0x040000

	S1=0x00040000
	B1=0x13000
	D11=0x080000
	D12=$((D11+B1))

	S2=0x00053000
	B2=0x11000
	D21=0x0a6000
	D22=$((D21+B2))

	S3=0x00064000
	B3=0x40000
	D31=0x0c8000
	D32=$((D31+B3))

	S4=0x000a4000
	B4=0x275000
	D41=0x148000

	IF=$UBOOT_DIR/fip/_tmp/u-boot.bin.signed
	OF=$UBOOT_DIR/fip/_tmp/u-boot.bin.spi.bin.signed
	# bl2
	dd if="$IF" skip=$((S0/512)) seek=$((D01/512)) count=$((B0/512)) bs=512 conv=fsync,notrunc of="$OF"
	dd if="$IF" skip=$((S0/512)) seek=$((D02/512)) count=$((B0/512)) bs=512 conv=fsync,notrunc of="$OF"
	# bl2e
	dd if="$IF" skip=$((S1/512)) seek=$((D11/512)) count=$((B1/512)) bs=512 conv=fsync,notrunc of="$OF"
	dd if="$IF" skip=$((S1/512)) seek=$((D12/512)) count=$((B1/512)) bs=512 conv=fsync,notrunc of="$OF"
	# bl2x
	dd if="$IF" skip=$((S2/512)) seek=$((D21/512)) count=$((B2/512)) bs=512 conv=fsync,notrunc of="$OF"
	dd if="$IF" skip=$((S2/512)) seek=$((D22/512)) count=$((B2/512)) bs=512 conv=fsync,notrunc of="$OF"
	# ddrfip
	dd if="$IF" skip=$((S3/512)) seek=$((D31/512)) count=$((B3/512)) bs=512 conv=fsync,notrunc of="$OF"
	dd if="$IF" skip=$((S3/512)) seek=$((D32/512)) count=$((B3/512)) bs=512 conv=fsync,notrunc of="$OF"
	# devfip
	dd if="$IF" skip=$((S4/512)) seek=$((D41/512)) count=$((B4/512)) bs=512 conv=fsync,notrunc of="$OF"
}

## Write u-boot
write_uboot_platform()
{
	dd if="$1/u-boot.bin.sd.bin.signed" of="$2" conv=fsync,notrunc bs=442 count=1 > /dev/null 2>&1
	dd if="$1/u-boot.bin.sd.bin.signed" of="$2" conv=fsync,notrunc bs=512 skip=1 seek=1 > /dev/null 2>&1
}

## Write u-boot for vendor u-boot
write_uboot_platform_ext()
{
	# Update u-boot partition
	[ -b /dev/mmcblk0p1 ] && dd if="$1/u-boot.bin.signed" of=/dev/mmcblk0p1 conv=fsync bs=512 seek=1 > /dev/null 2>&1
	# Enable write access for /dev/mmcblk0boot0
	[ -f /sys/block/mmcblk0boot0/force_ro ] && echo 0 > /sys/block/mmcblk0boot0/force_ro
	dd if="$1/u-boot.bin.signed" of=/dev/mmcblk0boot0 conv=fsync bs=512 seek=1 > /dev/null 2>&1
	# Enable write access for /dev/mmcblk0boot1
	[ -f /sys/block/mmcblk0boot1/force_ro ] && echo 0 > /sys/block/mmcblk0boot1/force_ro
	dd if="$1/u-boot.bin.signed" of=/dev/mmcblk0boot1 conv=fsync bs=512 seek=1 > /dev/null 2>&1
	# Disable write access for /dev/mmcblk0boot0/1
	[ -f /sys/block/mmcblk0boot0/force_ro ] && echo 1 > /sys/block/mmcblk0boot0/force_ro
	[ -f /sys/block/mmcblk0boot1/force_ro ] && echo 1 > /sys/block/mmcblk0boot1/force_ro
}

setup_write_uboot_platform()
{
	local tmp=$(cat /proc/cmdline)
	local bootsource="${tmp##*boot_source=}"
	local partition_type="${tmp##*partition_type=}"
	bootsource="${bootsource%% *}"
	partition_type="${partition_type%% *}"

	if [ "$bootsource" == "sd" ]; then
		DEVICE="/dev/mmcblk1"
	elif [ "$bootsource" == "emmc" ]; then
		if [ "$partition_type" == "generic" ]; then
			DEVICE="/dev/mmcblk0"
		else
			DEVICE="VENDOR"
		fi
	fi
}

## tweaks for platform
tweaks_platform() {
	echo "#Serial console allow root" >> $ROOTFS_TEMP/etc/securetty
	echo "ttyAML0" >> $ROOTFS_TEMP/etc/securetty

	# Setup default HDMI IN source
	echo "export HDMISRC=hdmi2" >> $ROOTFS_TEMP/etc/bash.bashrc
	# Setup GST environment
	echo "export GST_DEFAULT_V4L2_BUF_MODE=DMA_BUF_IMPORT" >> $ROOTFS_TEMP/etc/bash.bashrc

	# Enable services
	execute_in_chroot "systemctl --no-reload enable fan.service"

	if [ "$LINUX" != "mainline" ]; then
		execute_in_chroot "systemctl --no-reload enable bluetooth-khadas.service"
	fi

	if [ "$DISTRIB_TYPE" != "server" ] && [ "$LINUX" != "mainline" ]; then
		execute_in_chroot "systemctl --no-reload enable panel.service"
		execute_in_chroot "systemctl --no-reload enable tone2-control.service"
	fi

	# Create boot links
	if [ "$INSTALL_TYPE" == "EMMC" ]; then
		execute_in_chroot "ln -fs /boot/Image Image"
		execute_in_chroot "ln -fs /boot/initrd.img initrd.img"
		execute_in_chroot "ln -fs /boot/dtb/$(basename $LINUX_DTB) dtb.img"
		execute_in_chroot "ln -fs /boot/dtb dtb"
	else
		# Setup default DTB for SD/USB images
		execute_in_chroot "ln -fs dtb/amlogic/$(basename $LINUX_DTB) /boot/dtb.img"
	fi
}

## Build deb packages for platform
build_deb_packages_platform() {

	if [ "$DISTRIB_TYPE" == "minimal" ]; then
		warning_msg "Ignore build platform packages for minimal image."
		return 0
	fi

	if [ "$LINUX" == "5.15" ]; then
		if ([ "$DISTRIB_RELEASE" == "jammy" ] || [ "$DISTRIB_RELEASE" == "noble" ] || [ "$DISTRIB_RELEASE" == "bookworm" ]) && [ "$DISTRIB_TYPE" != "server" ]; then
			info_msg "Building mali-debs package..."
			# FIXME
			# remove build stamp to force build for other arch
			rm -rf $BUILD/.stamps/mali-debs
			build_package "mali-debs:target"
		fi

		info_msg "Building OPTEE userspace package..."
		# FIXME
		# remove build stamp to force build for other arch
		rm -rf $BUILD/.stamps/optee_userspace_deb_aml
		build_package "optee_userspace_deb_aml:target"

		info_msg "Building OPTEE video firmware package..."
		# FIXME
		# remove build stamp to force build for other arch
		rm -rf $BUILD/.stamps/optee_video_firmware_deb_aml
		build_package "optee_video_firmware_deb_aml:target"

		info_msg "Building libion package..."
		# FIXME
		# remove build stamp to force build for other arch
		rm -rf $BUILD/.stamps/libion_deb_aml
		build_package "libion_deb_aml:target"

		info_msg "Building libge2d package..."
		# FIXME
		# remove build stamp to force build for other arch
		rm -rf $BUILD/.stamps/libge2d_deb_aml
		build_package "libge2d_deb_aml:target"

		info_msg "Building libmultienc  package..."
		# FIXME
		# remove build stamp to force build for other arch
		rm -rf $BUILD/.stamps/libmultienc_deb_aml
		build_package "libmultienc_deb_aml:target"

		info_msg "Building libjpegenc package..."
		# FIXME
		# remove build stamp to force build for other arch
		rm -rf $BUILD/.stamps/libjpegenc_deb_aml
		build_package "libjpegenc_deb_aml:target"

		# FIXME
		# remove build stamp to force build for other arch
		rm -rf $BUILD/.stamps/libamvenc_deb_aml
		build_package "libamvenc_deb_aml:target"

		info_msg "Building multimedia package..."
		# FIXME
		# remove build stamp to force build for other arch
		rm -rf $BUILD/.stamps/multimedia_debs_aml
		build_package "multimedia_debs_aml:target"

		if [ "$DISTRIB_RELEASE" == "jammy" ] || [ "$DISTRIB_RELEASE" == "noble" ]; then
			info_msg "Building gstreamer_aml package..."
			# FIXME
			# remove build stamp to force build for other arch
			rm -rf $BUILD/.stamps/gstreamer_aml
			build_package "gstreamer_aml:target"

			info_msg "Building hdmiin-demo-debs-aml package..."
			# FIXME
			# remove build stamp to force build for other arch
			rm -rf $BUILD/.stamps/hdmiin-demo-debs-aml
			build_package "hdmiin-demo-debs-aml:target"
		fi

		info_msg "Building libadla package..."
		# FIXME
		# remove build stamp to force build for other arch
		rm -rf $BUILD/.stamps/libadla_deb_aml
		build_package "libadla_deb_aml:target"

		info_msg "Building meson-display package..."
		# FIXME
		# remove build stamp to force build for other arch
		rm -rf $BUILD/.stamps/meson-display-deb-aml
		build_package "meson-display-deb-aml:target"
	fi
}

## Install deb packages for platform
install_deb_packages_platform() {

	if [ "$DISTRIB_TYPE" == "minimal" ]; then
		warning_msg "Ignore install platform packages for minimal image."
		return 0
	fi

	if [ "$LINUX" == "5.15" ]; then
		if ([ "$DISTRIB_RELEASE" == "jammy" ] || [ "$DISTRIB_RELEASE" == "bookworm" ]) && [ "$DISTRIB_TYPE" != "server" ]; then
			info_msg "Installing mali-debs package ..."
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/mali-debs/${GPU_PLATFORM}/*.deb
		fi

		info_msg "Installing OPTEE userspace package..."
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/optee_userspace_deb_aml/*.deb

		info_msg "Installing OPTEE video firmware package..."
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/optee_video_firmware_deb_aml/*.deb

		info_msg "Installing libion package..."
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/libion_deb_aml/*.deb

		info_msg "Installing libge2d package..."
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/libge2d_deb_aml/*.deb

		info_msg "Installing libmultienc package..."
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/libmultienc_deb_aml/*.deb

		info_msg "Installing libjpegenc package..."
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/libjpegenc_deb_aml/*.deb

		info_msg "Installing libamvenc package..."
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/libamvenc_deb_aml/*.deb

		# Multimdia
		info_msg "Installing multimdia package..."
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/multimedia_debs_aml/gst-aml-drmbufferpool-plugins_*.deb
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/multimedia_debs_aml/mediactrlsrc_*.deb
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/multimedia_debs_aml/ispaml_*.deb

		if [ "$DISTRIB_RELEASE" == "noble" ]; then
			info_msg "Installing gstreamer_aml package..."
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/gstreamer_aml/gstreamer-aml_*.deb
		fi

		if [ "$DISTRIB_RELEASE" == "jammy" ]; then
			info_msg "Installing gstreamer_aml package..."
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/gstreamer_aml/gstreamer-aml_*.deb
			# gstreamer1.0
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/gstreamer_aml/gstreamer1.0-debs/libgstreamer1.0-0_*.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/gstreamer_aml/gstreamer1.0-debs/gir1.2-gstreamer-1.0_*.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/gstreamer_aml/gstreamer1.0-debs/gstreamer1.0-tools_*.deb
			# gst-plugins-base1.0
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/gstreamer_aml/gst-plugins-base1.0-debs/libgstreamer-plugins-base1.0-0_*.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/gstreamer_aml/gst-plugins-base1.0-debs/libgstreamer-gl1.0-0_*.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/gstreamer_aml/gst-plugins-base1.0-debs/gstreamer1.0-plugins-base_*.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/gstreamer_aml/gst-plugins-base1.0-debs/gstreamer1.0-plugins-base-apps_*.deb
			#install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/gstreamer_aml/gst-plugins-base1.0-debs/gstreamer1.0-x_*.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/gstreamer_aml/gst-plugins-base1.0-debs/gstreamer1.0-alsa_*.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/gstreamer_aml/gst-plugins-base1.0-debs/gir1.2-gst-plugins-base-1.0_*.deb
			# gst-plugins-good1.0
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/gstreamer_aml/gst-plugins-good1.0-debs/libgstreamer-plugins-good1.0-0_*.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/gstreamer_aml/gst-plugins-good1.0-debs/gstreamer1.0-plugins-good_*.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/gstreamer_aml/gst-plugins-good1.0-debs/gstreamer1.0-pulseaudio_*.deb
			# gst-plugins-bad1.0
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/gstreamer_aml/gst-plugins-bad1.0-debs/libgstreamer-plugins-bad1.0-0_*.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/gstreamer_aml/gst-plugins-bad1.0-debs/gstreamer1.0-plugins-bad_*.deb

			info_msg "Installing hdmiin-demo-debs-aml package..."
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/hdmiin-demo-debs-aml/hdmiin-demo_*.deb
		fi

		info_msg "Installing libadla package..."
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/libadla_deb_aml/*.deb

		info_msg "Installing meson-display package..."
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/meson-display-deb-aml/*.deb
	fi
}
