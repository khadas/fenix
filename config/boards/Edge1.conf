#!/bin/bash

#= Khadas Edge with Rockchip RK3399 SoC

SUPPORTED_UBOOT=("2017.09" "mainline")
SUPPORTED_UBOOT_DESC=("U-boot 2017.09" "U-boot Mainline")
SUPPORTED_LINUX=("4.4" "mainline")
SUPPORTED_LINUX_DESC=("Linux 4.4" "Linux Mainline")

case "$UBOOT" in
	2017.09)
		UBOOT_DEFCONFIG="kedge_defconfig"
		UBOOT_GIT_BRANCH="khadas-edge-v2017.09"
		[ "$UBOOT_VENDOR_DIR" ] && \
		UBOOT_DIR=$(realpath "$UBOOT_VENDOR_DIR")
		UBOOT_IMAGE_DIR="$UBOOT_DIR"
		UBOOT_IMAGE_FILES="idbloader.img MiniLoaderAll.bin MiniLoaderAll_spinor.bin trust.img uboot.img"
		;;
	mainline)
		UBOOT_DEFCONFIG="khadas-edge-captain-rk3399_defconfig"
		UBOOT_GIT_BRANCH="master"
		UBOOT_DIR="$BUILD/u-boot-mainline-*"
		UBOOT_IMAGE_DIR="$BUILD_IMAGES/u-boot-mainline/$KHADAS_BOARD"
		UBOOT_IMAGE_FILES="tpl-spl.img u-boot.itb"
		;;
esac

UBOOT_FORCE_REBUILD="no"

UBOOT_COMPILER="aarch64-linux-gnu-"
UBOOT_COMPILER_PATH="$TOOLCHAINS/gcc-linaro-aarch64-linux-gnu/bin"

case "$LINUX" in
	4.4)
		KERNEL_COMPILER="aarch64-linux-gnu-"
		KERNEL_COMPILER_PATH="$TOOLCHAINS/gcc-linaro-aarch64-linux-gnu/bin"
		LINUX_DTB="arch/arm64/boot/dts/rockchip/rk3399-khadas-edge-linux.dtb"
		[ "$LINUX_VENDOR_DIR" ] && \
		LINUX_DIR=$(realpath "$LINUX_VENDOR_DIR")
		LINUX_GIT_BRANCH="khadas-edge-4.4.y"
		LINUX_DEFCONFIG="${LINUX_DEFCONFIG:-kedge_defconfig}"
		SERIALCON="ttyFIQ0"
		BOOT_SCRIPT_BOARD="rk3399_autoscript.cmd"
		GPU_VER="r14p0"
		if [ "$DISTRIB_TYPE" != "server" ]; then
			GPU_PLATFORM="x11"
		else
			GPU_PLATFORM="gbm"
		fi
		MODESETTING_CONF="20-modesetting.conf"
		;;
	mainline)
		KERNEL_COMPILER="aarch64-none-linux-gnu-"
		KERNEL_COMPILER_PATH="$TOOLCHAINS/gcc-arm-aarch64-none-linux-gnu-mainline/bin"
		LINUX_DTB="arch/arm64/boot/dts/rockchip/rk3399-khadas-edge.dtb"
		LINUX_DIR="$BUILD/linux-mainline-*"
		LINUX_GIT_BRANCH="master"
		LINUX_DEFCONFIG="${LINUX_DEFCONFIG:-defconfig}"
		SERIALCON="ttyS2"
		BOOT_SCRIPT_BOARD="rk3399_autoscript.cmd"
		GPU_VER=""
		GPU_PLATFORM=""
		MODESETTING_CONF="01-panfrost.conf"
		;;
esac

BOOT_SCRIPT_VENDOR="rockchip_autoscript.txt"

BOOT_INI="rockchip_boot.ini"
BOOT_ENV_FILE="rockchip_default_env.txt"
BOOT_ENV_FILE_EXT="Edge_env_ext.txt"

CPUMIN="600000"
CPUMAX="2016000"
GOVERNOR="ondemand"

####
WIFI_MODEL="Broadcom"
GPU_MODEL="arm-mali-midgard-t86x"

##############################
uboot_custom_postprocess() {

	# try resolve
	for RK_BIN in "$BUILD"/rkbin_edge1-*; do
	    [ -d "$RK_BIN" ] || {
		error_msg "Not found $RK_BIN"
		return 1
	    }
	done

	# try resolve
	for UBOOT_DIR in $UBOOT_DIR; do
	    [ -d "$UBOOT_DIR" ] || {
		error_msg "Not found $UBOOT_DIR"
		return 1
	    }
	done

	# already inside it may be no need it
	#cd $UBOOT_DIR
	cd "$UBOOT_DIR"

	# Cleanup old binaries
	rm -rf uboot.img trust.img MiniLoaderAll.bin MiniLoaderAll_spinor.bin u-boot-spi.bin

	if [ "$UBOOT" == "mainline" ]; then
		UBOOT_LOAD_ADDR=`sed -n "/CONFIG_SYS_TEXT_BASE=/s/CONFIG_SYS_TEXT_BASE=//p" .config|tr -d '\r'`
	else
		UBOOT_LOAD_ADDR=`sed -n "/CONFIG_SYS_TEXT_BASE=/s/CONFIG_SYS_TEXT_BASE=//p" include/autoconf.mk|tr -d '\r'`
	fi
	info_msg "Packing uboot.img..."
	"$RK_BIN"/tools/loaderimage --pack --uboot ./u-boot.bin uboot.img ${UBOOT_LOAD_ADDR}
	rm u-boot.img u-boot-dtb.img

	info_msg "Packing idbloader.img..."
	tools/mkimage -n rk3399 -T rksd -d "$RK_BIN"/rk3399_ddr.bin idbloader.img
	cat "$RK_BIN"/rk3399miniloaderall.bin >> idbloader.img
	info_msg "pack idbloader.img okay!"

	cd "$RK_BIN"
	info_msg "Packing SPI/NOR miniloader..."
	"$RK_BIN"/tools/boot_merger --replace tools/rk_tools/ ./ "$RK_BIN"/RKBOOT/RK3399MINIALL_SPINOR.ini
	cd -
	mv "$RK_BIN"/*_loader_spinor_*.bin ./MiniLoaderAll_spinor.bin

	cd "$RK_BIN"
	info_msg "Packing eMMC miniloader..."
	"$RK_BIN"/tools/boot_merger --replace tools/rk_tools/ ./ "$RK_BIN"/RKBOOT/RK3399MINIALL.ini
	cd -
	mv "$RK_BIN"/*_loader_*.bin ./MiniLoaderAll.bin

	cd "$RK_BIN"
	info_msg "Packing trust.img..."
	"$RK_BIN"/tools/trust_merger --replace tools/rk_tools/ ./ "$RK_BIN"/RKTRUST/RK3399TRUST.ini
	cd -
	pwd
	mv "$RK_BIN"/trust.img ./trust.img

	if [ "$UBOOT" == "2017.09" ]; then
		# Merge SPI U-boot
		info_msg "Merge SPI U-boot..."
		# Fixup links
		ln -fs "$UBOOT_DIR"/uboot.img "$RK_BIN"/uboot.img
		ln -fs "$UBOOT_DIR"/trust.img "$RK_BIN"/trust.img
		cd "$RK_BIN"
		chmod +x firmware_merger
		./firmware_merger -P rk3399_spi.ini ./
		mv Firmware.img "$UBOOT_DIR"/u-boot-spi.bin
		rm Firmware.md5 uboot.img trust.img
		cd -
	fi

	cd "$ROOT"
}

## Write u-boot
write_uboot_platform()
{
	if [ "$UBOOT" == "mainline" ]; then
		dd if=$1/tpl-spl.img of=$2 seek=64 conv=fsync,notrunc > /dev/null 2>&1
		dd if=$1/u-boot.itb of=$2 seek=16384 conv=fsync,notrunc > /dev/null 2>&1
	else
		dd if=$1/idbloader.img of=$2 seek=64 conv=notrunc > /dev/null 2>&1
		dd if=$1/uboot.img of=$2 seek=16384 conv=notrunc > /dev/null 2>&1
		dd if=$1/trust.img of=$2 seek=24576 conv=notrunc > /dev/null 2>&1
	fi
}

## Used for updating vendor image u-boot
write_uboot_platform_ext()
{
	dd if=$1/idbloader.img of=${2}p1 conv=notrunc > /dev/null 2>&1
	dd if=$1/uboot.img of=${2}p2 conv=notrunc > /dev/null 2>&1
	dd if=$1/trust.img of=${2}p3 conv=notrunc > /dev/null 2>&1
}

setup_write_uboot_platform()
{
	if grep -q "ubootpart" /proc/cmdline; then
		local tmp=$(cat /proc/cmdline)
		local ubootpart="${tmp##*ubootpart=}"
		local imagetype="${tmp##*imagetype=}"
		ubootpart="${ubootpart%% *}"
		imagetype="${imagetype%% *}"

		[[ -n $ubootpart && $ubootpart != NULL ]] && local part=$(findfs PARTUUID=$ubootpart 2>/dev/null)
		[[ -n $part ]] && local dev=$(lsblk -n -o PKNAME $part 2>/dev/null)
		[[ -n $dev ]] && DEVICE="/dev/$dev"
	fi
}

## Pack image
pack_image_platform_raw() {

    # ABOUT

    # this simple raw image suitable for dd write to eMMC
    # same for Krescue usage
    # simple alternative for rockchip image

    # USAGE
    #
    # INSTALL_TYPE_RAW=yes make
    #
    # INSTALL_TYPE_RAW=yes COMPRESS_IMAGE=yes make

    [ "$INSTALL_TYPE" != "EMMC" ] && return
    [ "$INSTALL_TYPE_RAW" != "yes" ] && return

    info_msg "Simple raw image suitable for dd write -> $IMAGE_FILE_NAME"

    #####################################
    BS=512
    IMAGE_SIZE=$((8*1024*1024*1024))
    IMAGE_BLOCKS=$((IMAGE_SIZE/BS))
    ## offset by BS blocks ##############
    LOADER_OFFSET=64
    UBOOT_OFFSET=16384
    TRUST_OFFSET=24576
    RESOURCE_OFFSET=40960
    ROOTFS_OFFSET=262144

    IMG="$BUILD_IMAGES/$IMAGE_FILE_NAME"

    RK_PARTS="## PARTS_BEGIN linux
    label: gpt
    label-id: 2A583E58-486A-4BD4-ACE4-8D5454E97F5C
    device: /dev/mmcblk2
    unit: sectors
    first-lba: 34
    last-lba: $((IMAGE_BLOCKS-34))

    /dev/mmcblk2p1 : start=       $LOADER_OFFSET,   size=        8064, type=43784A32-A03D-4ADE-92C6-EDE64FF9B794, uuid=6115F139-4F47-4BAF-8D23-B6957EAEE4B3, name="loader1"
    /dev/mmcblk2p2 : start=       $UBOOT_OFFSET,    size=        8192, type=000B305F-484A-4582-9090-4AD0099D47BD, uuid=A83FBA16-D354-45C5-8B44-3EC50832D363, name="uboot"
    /dev/mmcblk2p3 : start=       $TRUST_OFFSET,    size=        8192, type=24EEB649-277F-4C11-FFEB-D9F20027A83B, uuid=500E2214-B72D-4CC3-D7C1-8419260130F5, name="trust"
    /dev/mmcblk2p4 : start=       32768,            size=        8192, type=1CAC805F-726A-495A-FD35-821355A6E7E8, uuid=E099DA71-5450-44EA-AA9F-1B771C582805, name="misc"
    /dev/mmcblk2p5 : start=       $RESOURCE_OFFSET, size=       32768, type=2BFEE623-D83C-426A-AB80-21732C9BB7D3, uuid=AF12D156-5D5B-4EE3-B415-8D492CA12EA9, name="resource"
    /dev/mmcblk2p6 : start=       73728,            size=      188416, type=B2AF085D-A675-48C6-C437-F6D557FF4744, uuid=8EB9EE49-E963-4BB6-FD75-F30618DF9DCD, name="kernel", attrs="LegacyBIOSBootable"
    /dev/mmcblk2p7 : start=       $ROOTFS_OFFSET,                      type=2D9E7B61-1B31-47E7-EE0D-8CEC26D42EF6, uuid=614E0000-0000-4B53-8000-1D28000054A9, name="rootfs", attrs="LegacyBIOSBootable"
    "

    #CMD(){
    #    echo "# $@">&2
    #    $@
    #}

    DDN() {
	dd status=none conv=sparse,fsync,notrunc if="$1" of="$2" $3 $4 $5 $6
    }

    DD() {
	dd status=progress conv=sparse,fsync,notrunc if="$1" of="$2" $3 $4 $5 $6
    }

    rm -rf "$IMG"
    DDN /dev/zero "$IMG" seek=$((IMAGE_BLOCKS-1)) count=1
    #truncate -s$IMAGE_SIZE "$IMG"
    echo "$RK_PARTS" | sfdisk -q "$IMG" || {
	error_msg "sfdisk fail"
	return 1
    }
    DDN "$UBOOT_IMAGE_DIR"/idbloader.img "$IMG" seek=$LOADER_OFFSET
    DDN "$UBOOT_IMAGE_DIR"/uboot.img     "$IMG" seek=$UBOOT_OFFSET
    DDN "$UBOOT_IMAGE_DIR"/trust.img     "$IMG" seek=$TRUST_OFFSET
    DDN "$BUILD_IMAGES"/logo.img         "$IMG" seek=$RESOURCE_OFFSET
    DD  "$BUILD_IMAGES"/rootfs.img       "$IMG" seek=$ROOTFS_OFFSET

    ROOTFS_SIZE=$(stat -c%s "$BUILD_IMAGES"/rootfs.img)
    # minimize image
    truncate -s$((ROOTFS_OFFSET*BS+ROOTFS_SIZE)) "$IMG"

}

## Pack image
pack_image_platform() {

	if [ "$1" == "uboot-image" ]; then
		PACK_UBOOT_IMAGE="yes"
	else
		PACK_UBOOT_IMAGE="no"
	fi

    cd ${ROOT}

    info_msg "Image install type: $INSTALL_TYPE"
    if [ "$INSTALL_TYPE" == "EMMC" ]; then
		# Adjust u-boot links
		info_msg "Adjust u-boot links for uboot-$UBOOT"

		# resolve and check dir
		for UPGRADE_DIR_ in $UPGRADE_DIR; do
		    [ -d "$UPGRADE_DIR_" ] || {
		    error_msg "UPGRADE_DIR not exist: $UPGRADE_DIR"
		    return 1
		    }
		done

		# try resolve
		for UBOOT_DIR in $UBOOT_DIR; do
		    [ -d "$UBOOT_DIR" ] || {
		    error_msg "Not found $UBOOT_DIR"
		    return 1
		    }
		done

		D="$UPGRADE_DIR_/Rockchip"
		cd "$D/Image"
		#cd $UPGRADE_DIR/Rockchip/Image

		ln -fs "$UBOOT_DIR"/MiniLoaderAll.bin MiniLoaderAll.bin
		ln -fs "$UBOOT_DIR"/uboot.img         uboot.img
		ln -fs "$UBOOT_DIR"/trust.img         trust.img

		cd "$D"

		# Fixup package-file
		if [ "$PACK_UBOOT_IMAGE" != "yes" ]; then
			ln -fs  rk3399-package-file package-file
		else
			IMAGE_FILE_NAME="${KHADAS_BOARD}-uboot-${UBOOT}-${IMAGE_VERSION}-emmc.img"
			IMAGE_FILE_NAME=${IMAGE_FILE_NAME,,}
			ln -fs  rk3399-package-file-uboot-image package-file
		fi

		./afptool -pack ./ Image/update.img
		./rkImageMaker -RK330C Image/MiniLoaderAll.bin Image/update.img update.img -os_type:androidos
		mv ./update.img $BUILD_IMAGES/$IMAGE_FILE_NAME
		rm -rf Image/update.img
		info_msg "Making $BUILD_IMAGES/$IMAGE_FILE_NAME OK."
		cd - > /dev/null
	elif [ "$INSTALL_TYPE" == "SD-USB" ]; then
		if [ "$PACK_UBOOT_IMAGE" == "yes" ]; then
			IMAGE_FILE_NAME="${KHADAS_BOARD}-uboot-${UBOOT}-${IMAGE_VERSION}-sd.img"
			IMAGE_FILE_NAME=${IMAGE_FILE_NAME,,}
			info_msg "Create U-Boot SD image..."
			dd if=/dev/zero of=${BUILD_IMAGES}/${IMAGE_FILE_NAME} bs=1M count=0 seek=16 > /dev/null 2>&1
		fi

		write_uboot_platform "$UBOOT_IMAGE_DIR" "$BUILD_IMAGES/$IMAGE_FILE_NAME"
    else
        error_msg "Unsupported install type: '$INSTALL_TYPE'"
        return 1
    fi

	echo ""
    info_msg "IMAGE: ${GREEN}$BUILD_IMAGES/$IMAGE_FILE_NAME ${ENDCOLOR} is ready!"
}

## tweaks for platform
tweaks_platform() {
	echo "#Serial console allow root" >> $ROOTFS_TEMP/etc/securetty
	echo "ttyFIQ0" >> $ROOTFS_TEMP/etc/securetty

	# Enable services
	eval 'LC_ALL=C LANG=C chroot $ROOTFS_TEMP /bin/bash -c "systemctl --no-reload enable fan.service"'

	if [ "$LINUX" != "mainline" ]; then
		eval 'LC_ALL=C LANG=C chroot $ROOTFS_TEMP /bin/bash -c "systemctl --no-reload enable bluetooth-khadas.service"'
	fi

	# Create boot links
	if [ "$INSTALL_TYPE" == "EMMC" ]; then
		eval 'LC_ALL=C LANG=C chroot $ROOTFS_TEMP /bin/bash -c "ln -fs /boot/zImage zImage"'
		eval 'LC_ALL=C LANG=C chroot $ROOTFS_TEMP /bin/bash -c "ln -fs /boot/uInitrd uInitrd"'
		eval 'LC_ALL=C LANG=C chroot $ROOTFS_TEMP /bin/bash -c "ln -fs /boot/dtb/rk3399-khadas-edge-linux.dtb dtb.img"'
	fi
}

# Build deb packages for platform
build_deb_packages_platform() {

	if [ "$DISTRIB_TYPE" == "minimal" ]; then
		warning_msg "Ignore build platform packages for minimal image."
		return 0
	fi

	if [ "$LINUX" == "4.4" ] && [ "$DISTRIBUTION" == "Ubuntu" ] && [ "$DISTRIB_RELEASE" != "jammy" ]; then
		info_msg "Building mpp..."
		# FIXME
		# remove build stamp to force build for other arch
		rm -rf $BUILD/.stamps/mpp_rk3399
		build_package "mpp_rk3399:target"

		info_msg "Building kodi..."
		# FIXME
		# remove build stamp to force build for other arch
		rm -rf $BUILD/.stamps/kodi_rk3399
		build_package "kodi_rk3399:target"

		info_msg "Building libcec..."
		# FIXME
		# remove build stamp to force build for other arch
		rm -rf $BUILD/.stamps/libcec_debs
		build_package "libcec_debs:target"

		if [ "$DISTRIB_TYPE" != "server" ]; then
			info_msg "Building xserver..."
			# FIXME
			# remove build stamp to force build for other arch
			rm -rf $BUILD/.stamps/xserver_rk3399
			build_package "xserver_rk3399:target"
		fi

		if [ "$DISTRIB_RELEASE" == "bionic" ]; then
			if [ "$DISTRIB_TYPE" != "server" ]; then
				info_msg "Building gstreamer..."
				# FIXME
				# remove build stamp to force build for other arch
				rm -rf $BUILD/.stamps/gstreamer_rk3399
				build_package "gstreamer_rk3399:target"

				info_msg "Building qt..."
				# FIXME
				# remove build stamp to force build for other arch
				rm -rf $BUILD/.stamps/qt_rk3399
				build_package "qt_rk3399:target"
			fi
		fi

		info_msg "Building libdrm..."
		# FIXME
		# remove build stamp to force build for other arch
		rm -rf $BUILD/.stamps/libdrm_rk3399
		build_package "libdrm_rk3399:target"
	fi

	if [ "$LINUX" == "mainline" ] && [ "$DISTRIB_RELEASE" != "bionic" ] && [ "$DISTRIB_RELEASE" != "jammy" ] && [ "$DISTRIB_TYPE" != "server" ]; then
		info_msg "Building mesa..."
		# FIXME
		# remove build stamp to force build for other arch
		rm -rf $BUILD/.stamps/mesa_debs
		build_package "mesa_debs:target"
	fi
}

# Install deb packages for platform
install_deb_packages_platform() {

	if [ "$DISTRIB_TYPE" == "minimal" ]; then
		warning_msg "Ignore install platform packages for minimal image."
		return 0
	fi

	if [ "$LINUX" == "4.4" ] && [ "$DISTRIBUTION" == "Ubuntu" ] && [ "$DISTRIB_RELEASE" != "jammy" ]; then

		# Install mpp in chroot
		info_msg "Installing mpp..."
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mpp/librockchip-mpp1_*.deb
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mpp/librockchip-mpp1-dbgsym_*.deb
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mpp/librockchip-mpp-dev_*.deb
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mpp/librockchip-mpp-static_*.deb
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mpp/librockchip-vpu0_*.deb
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mpp/librockchip-vpu0-dbgsym_*.deb
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mpp/rockchip-mpp-demos_*.deb
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mpp/rockchip-mpp-demos-dbgsym_*.deb

		# Install kodi in chroot
		info_msg "Installing kodi..."
		debs=$(ls $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/kodi/deps/*.deb)
		for deb in $debs
		do
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/kodi/deps/$(basename $deb)
		done
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/kodi/kodi-bin_*.deb
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/kodi/kodi_*.deb

		# Install libcec in chroot
		info_msg "Installing libcec..."
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/libcec/libcec4_*.deb
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/libcec/libcec_*.deb
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/libcec/libcec4-*.deb
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/libcec/python3-libcec_*.deb
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/libcec/cec-utils_*.deb

		if [ "$DISTRIB_TYPE" != "server" ]; then
			cd $ROOT
			# Install xserver in chroot
			info_msg "Installing xserver..."
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/xserver/xserver-common_*.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/xserver/xserver-xephyr_*.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/xserver/xserver-xorg-core_*.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/xserver/xserver-xorg-dev_*.deb
			cd -
		fi

		if [ "$DISTRIB_RELEASE" == "bionic" ]; then

			if [ "$DISTRIB_TYPE" != "server" ]; then
				# Install gstreamer in chroot
				info_msg "Installing gstreamer..."
				debs=$(ls $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/gstreamer/*.deb)
				for deb in $debs
				do
					install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/gstreamer/$(basename $deb)
				done

				# Install qt in chroot
				info_msg "Installing qt..."
				debs=$(ls $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/qt/*.deb)
				for deb in $debs
				do
					install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/qt/$(basename $deb)
				done
			fi
		fi

		cd $ROOT

		# Install libdrm in chroot
		info_msg "Installing libdrm..."
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/libdrm/libdrm2_*.deb
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/libdrm/libdrm-rockchip1_*.deb
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/libdrm/libdrm-dev_*.deb
	fi

	if [ "$LINUX" == "mainline" ] && [ "$DISTRIB_RELEASE" != "jammy" ] && [ "$DISTRIB_TYPE" != "server" ]; then
		# Install mesa in chroot
		info_msg "Installing mesa..."

		if [ "$DISTRIB_RELEASE" == "buster" ]; then
			# update libdrm
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/libdrm/libdrm-common_*_all.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/libdrm/libdrm2_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/libdrm/libdrm2-dbgsym_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/libdrm/libdrm-amdgpu1_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/libdrm/libdrm-amdgpu1-dbgsym_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/libdrm/libdrm-etnaviv1_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/libdrm/libdrm-etnaviv1-dbgsym_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/libdrm/libdrm-freedreno1_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/libdrm/libdrm-freedreno1-dbgsym_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/libdrm/libdrm-nouveau2_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/libdrm/libdrm-nouveau2-dbgsym_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/libdrm/libdrm-radeon1_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/libdrm/libdrm-radeon1-dbgsym_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/libdrm/libdrm-tegra0_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/libdrm/libdrm-tegra0-dbgsym_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/libdrm/libdrm-dev_*_arm64.deb

			# update libglvnd
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/libglvnd/libglvnd-core-dev_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/libglvnd/libglvnd0_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/libglvnd/libglvnd0-dbgsym_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/libglvnd/libglvnd-dev_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/libglvnd/libglx0_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/libglvnd/libglx0-dbgsym_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/libglvnd/libgl1_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/libglvnd/libgl1-dbgsym_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/libglvnd/libegl1_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/libglvnd/libegl1-dbgsym_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/libglvnd/libgl-dev_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/libglvnd/libegl-dev_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/libglvnd/libgles1_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/libglvnd/libgles1-dbgsym_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/libglvnd/libgles2_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/libglvnd/libgles2-dbgsym_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/libglvnd/libgles-dev_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/libglvnd/libglx-dev_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/libglvnd/libopengl0_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/libglvnd/libopengl0-dbgsym_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/libglvnd/libopengl-dev_*_arm64.deb

			# install mesa
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/libd3dadapter9-mesa_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/libd3dadapter9-mesa-dev_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/libegl1-mesa_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/libegl1-mesa-dev_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/libgbm1_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/libgbm1-dbgsym_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/libgbm-dev_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/libgl1-mesa-dev_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/libglapi-mesa_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/libglapi-mesa-dbgsym_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/libgl1-mesa-dri_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/libgl1-mesa-dri-dbgsym_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/libgles2-mesa_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/libgles2-mesa-dev_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/libegl-mesa0_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/libegl-mesa0-dbgsym_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/libglx-mesa0_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/libglx-mesa0-dbgsym_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/libgl1-mesa-glx_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/libosmesa6_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/libosmesa6-dbgsym_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/libosmesa6-dev_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/libwayland-egl1-mesa_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/mesa-common-dev_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/mesa-opencl-icd_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/mesa-va-drivers_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/mesa-vdpau-drivers_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/mesa-vulkan-drivers_*_arm64.deb
		elif [ "$DISTRIB_RELEASE" == "focal" ]; then
			# update mesa
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/libd3dadapter9-mesa_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/libegl1-mesa_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/libgbm1_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/libglapi-mesa_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/libgl1-mesa-dri_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/libgles2-mesa_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/libegl-mesa0_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/libglx-mesa0_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/libgl1-mesa-glx_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/libosmesa6_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/libwayland-egl1-mesa_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/mesa-opencl-icd_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/mesa-va-drivers_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/mesa-vdpau-drivers_*_arm64.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mesa/mesa/mesa-vulkan-drivers_*_arm64.deb
		fi
	fi
}
