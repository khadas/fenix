#!/bin/bash

#= Khadas Edge2 with Rockchip RK3588S SoC

SUPPORTED_UBOOT=("2017.09" "mainline")
SUPPORTED_UBOOT_DESC=("U-boot 2017.09" "U-boot Mainline")
declare -A SUPPORTED_LINUX SUPPORTED_LINUX_DESC
SUPPORTED_LINUX["2017.09"]="5.10 6.1 mainline"
SUPPORTED_LINUX_DESC["2017.09"]="'Linux 5.10' 'Linux 6.1' 'Linux Mainline'"
SUPPORTED_LINUX["mainline"]="mainline"
SUPPORTED_LINUX_DESC["mainline"]="Linux Mainline"

DISTRIBUTION_ARRAY=("Ubuntu" "Debian")
DISTRIBUTION_ARRAY_DESC=("Ubuntu" "Debian")
Ubuntu_RELEASE_ARRAY=("jammy" "noble")
Ubuntu_RELEASE_VERSION_ARRAY=("22.04" "24.04")
Ubuntu_RELEASE_ARRAY_DESC=("Ubuntu 22.04" "Ubuntu 24.04")
Debian_RELEASE_ARRAY=("bullseye" "bookworm")
Debian_RELEASE_VERSION_ARRAY=("11" "12")
Debian_RELEASE_ARRAY_DESC=("Debian 11" "Debian 12")
DISTRIB_ARCH_ARRAY=("arm64")
Ubuntu_TYPE_ARRAY=("server" "minimal" "gnome")
Ubuntu_TYPE_ARRAY_DESC=("Headless Image With Essential Packages"\
						"Minimal Image With Very Basic Packages"\
						"Desktop Image With GNOME Desktop")
Debian_TYPE_ARRAY=("server" "minimal" "gnome")
Debian_TYPE_ARRAY_DESC=("Headless Image With Essential Packages"\
						"Minimal Image With Very Basic Packages"\
						"Desktop Image With GNOME Desktop")
INSTALL_TYPE_ARRAY=("EMMC" "SD-USB")
INSTALL_TYPE_ARRAY_DESC=("Image For Writing to eMMC Storage With USB Burning Tool"\
						 "Image For Writing to SD/USB Storage")

case "$UBOOT" in
	2017.09)
		UBOOT_DEFCONFIG="khadas-edge2-rk3588s_defconfig"
		UBOOT_GIT_BRANCH="khadas-edges-v2017.09"
		[ "$UBOOT_VENDOR_DIR" ] && \
		UBOOT_DIR=$(realpath "$UBOOT_VENDOR_DIR")
		UBOOT_IMAGE_DIR="$UBOOT_DIR"
		UBOOT_IMAGE_FILES="rk3588_spl_loader.bin uboot.img idblock.bin"
		;;
	mainline)
		UBOOT_DEFCONFIG="khadas-edge2-rk3588s_defconfig"
		UBOOT_GIT_BRANCH="khadas-u-boot-v2024.07"
		[ "$UBOOT_VENDOR_DIR" ] && \
		UBOOT_DIR=$(realpath "$UBOOT_VENDOR_DIR")
		UBOOT_IMAGE_DIR="$UBOOT_DIR"
		UBOOT_IMAGE_FILES="u-boot-rockchip.bin"
		;;
esac

UBOOT_FORCE_REBUILD="no"

UBOOT_COMPILER="aarch64-linux-gnu-"
UBOOT_COMPILER_PATH="$TOOLCHAINS/gcc-linaro-aarch64-linux-gnu/bin"

KERNEL_COMPILER="aarch64-none-linux-gnu-"
KERNEL_COMPILER_PATH="$TOOLCHAINS/gcc-arm-aarch64-none-linux-gnu/bin"

case "$LINUX" in
	5.10)
		[ "$LINUX_VENDOR_DIR" ] && \
		LINUX_DIR=$(realpath "$LINUX_VENDOR_DIR")
		LINUX_DTB="$LINUX_DIR/arch/arm64/boot/dts/rockchip/rk3588s-khadas-edge2.dtb"
		LINUX_GIT_BRANCH="khadas-edges-5.10.y"
		LINUX_DEFCONFIG="${LINUX_DEFCONFIG:-kedges_defconfig}"
		SERIALCON="ttyFIQ0"
		BOOT_SCRIPT_BOARD=""
		GPU_VER="g610"
		if [ "$DISTRIB_TYPE" != "server" ]; then
			GPU_PLATFORM="wayland"
		fi
		MODESETTING_CONF=""
		EXTLINUX_CONF="Edge2_extlinux.conf"
		if [ "$DISTRIB_RELEASE" == "noble" ];then
			PANFORK_SUPPORT=yes;
		fi
		;;
	6.1)
		[ "$LINUX_VENDOR_DIR" ] && \
		LINUX_DIR=$(realpath "$LINUX_VENDOR_DIR")
		LINUX_DTB="$LINUX_DIR/arch/arm64/boot/dts/rockchip/rk3588s-khadas-edge2.dtb"
		LINUX_GIT_BRANCH="khadas-edges-6.1.y"
		LINUX_DEFCONFIG="${LINUX_DEFCONFIG:-kedges_defconfig}"
		SERIALCON="ttyFIQ0"
		BOOT_SCRIPT_BOARD=""
		GPU_VER="g610"
		if [ "$DISTRIB_TYPE" != "server" ]; then
			GPU_PLATFORM="wayland"
		fi
		MODESETTING_CONF=""
		EXTLINUX_CONF="Edge2_extlinux.conf"
		if [ "$DISTRIB_RELEASE" == "noble" ];then
			PANFORK_SUPPORT=yes;
		fi
		;;
	mainline)
		[ "$LINUX_VENDOR_DIR" ] && \
		LINUX_DIR=$(realpath "$LINUX_VENDOR_DIR")
		LINUX_DTB="$LINUX_DIR/arch/arm64/boot/dts/rockchip/rk3588s-khadas-edge2.dtb"
		LINUX_GIT_BRANCH="khadas-linux-6.10.y"
		LINUX_DEFCONFIG="${LINUX_DEFCONFIG:-kedges_defconfig}"
		SERIALCON="ttyS2"
		BOOT_SCRIPT_BOARD=""
		GPU_VER=""
		GPU_PLATFORM=""
		MODESETTING_CONF=""
		EXTLINUX_CONF="Edge2_extlinux_mainline.conf"
		if [ "$DISTRIB_RELEASE" == "noble" ];then
			PANFORK_SUPPORT=yes;
		fi
		;;
esac

LINUX_DEFCONFIG_DIR="$LINUX_DIR/arch/arm64/configs"

BOOT_SCRIPT_VENDOR=""

BOOT_INI=""
BOOT_ENV_FILE=""
BOOT_ENV_FILE_NEW="Edge2_uEnv.txt"
BOOT_ENV_FILE_EXT=""

CPUMIN="408000"
CPUMAX="2400000"
GOVERNOR="performance"

BOOTFS_TYPE="ext4"
GENERIC_IMAGE_PARTITION_TABLE="gpt"

####
WIFI_MODEL="Broadcom"
GPU_MODEL="arm-mali-valhall-g610"

##############################
uboot_custom_postprocess() {

	if [ "$UBOOT" == "mainline" ]; then
		return
	fi

	# try resolve
	for RK_BIN in "$BUILD"/rkbin-*; do
		[ -d "$RK_BIN" ] || {
		error_msg "Not found $RK_BIN"
		return 1
		}
	done

	# try resolve
	for UBOOT_DIR in $UBOOT_DIR; do
		[ -d "$UBOOT_DIR" ] || {
		error_msg "Not found $UBOOT_DIR"
		return 1
		}
	done

	# already inside it may be no need it
	#cd $UBOOT_DIR
	cd "$UBOOT_DIR"

	# Cleanup old binaries
	rm -rf uboot.img MiniLoaderAll.bin rk3588_spl_loader.bin idblock.bin

	if [ "$UBOOT" == "mainline" ]; then
		UBOOT_LOAD_ADDR=`sed -n "/CONFIG_SYS_TEXT_BASE=/s/CONFIG_SYS_TEXT_BASE=//p" .config|tr -d '\r'`
	else
		UBOOT_LOAD_ADDR=`sed -n "/CONFIG_SYS_TEXT_BASE=/s/CONFIG_SYS_TEXT_BASE=//p" include/autoconf.mk|tr -d '\r'`
	fi

	info_msg "Packing trust.img..."
	cd "$RK_BIN"
	"$RK_BIN"/tools/trust_merger "$RK_BIN"/RKTRUST/RK3588TRUST.ini
	cd -
	pwd
	mv "$RK_BIN"/trust.img ./trust.img

	info_msg "Packing uboot.img..."
	cp "$RK_BIN"/rk3588_bl31.elf bl31.elf
	cp "$RK_BIN"/rk3588_bl32.bin tee.bin
	arch/arm/mach-rockchip/make_fit_atf.sh -t 0x08400000 > u-boot.its
	"$RK_BIN"/tools/mkimage -f u-boot.its -E u-boot.itb
	cat u-boot.itb >> uboot.img
	truncate -s %2048K uboot.img
	cat u-boot.itb >> uboot.img
	truncate -s %2048K uboot.img
	info_msg "pack uboot.img okay!"

	info_msg "Packing SPL loader..."
	./make.sh --spl
	ln -fs *_loader_*.bin rk3588_spl_loader.bin

	# Generate idblock.bin
	info_msg "Generating idblock.bin ..."
	./tools/mkimage -n rk3588 -T rksd -d "$RK_BIN"/rk3588_ddr.bin:spl/u-boot-spl.bin idblock.bin

	cd "$ROOT"
}

## Write u-boot
write_uboot_platform()
{
	if [ "$UBOOT" == "mainline" ]; then
		dd if=$1/u-boot-rockchip.bin of=$2 seek=64 conv=notrunc > /dev/null 2>&1
	else
		dd if=$1/idblock.bin of=$2 seek=64 conv=notrunc > /dev/null 2>&1
		dd if=$1/uboot.img of=$2 seek=16384 conv=notrunc > /dev/null 2>&1
	fi
}

## Used for updating vendor image u-boot
write_uboot_platform_ext()
{
	dd if=$1/idblock.bin of=/dev/mmcblk0p1 conv=notrunc > /dev/null 2>&1
	dd if=$1/uboot.img of=/dev/mmcblk0p2 conv=notrunc > /dev/null 2>&1
#	dd if=$1/trust.img of=/dev/mmcblk0p3 conv=notrunc > /dev/null 2>&1
}

setup_write_uboot_platform()
{
	local tmp=$(cat /proc/cmdline)
	local bootsource="${tmp##*storagemedia=}"
	local partition_type="${tmp##*partition_type=}"
	bootsource="${bootsource%% *}"
	partition_type="${partition_type%% *}"

	if [ "$bootsource" == "sd" ]; then
		DEVICE="/dev/mmcblk1"
	elif [ "$bootsource" == "emmc" ]; then
		if [ "$partition_type" == "generic" ]; then
			DEVICE="/dev/mmcblk0"
		else
			DEVICE="VENDOR"
		fi
	fi
}

## Pack image
pack_image_platform_raw() {

	# ABOUT

	# this simple raw image suitable for dd write to eMMC
	# same for Krescue usage
	# simple alternative for rockchip image

	# USAGE
	#
	# INSTALL_TYPE_RAW=yes make
	#
	# INSTALL_TYPE_RAW=yes COMPRESS_IMAGE=yes make

	[ "$INSTALL_TYPE" != "EMMC" ] && return
	[ "$INSTALL_TYPE_RAW" != "yes" ] && return

	info_msg "Simple raw image suitable for dd write -> $IMAGE_FILE_NAME"

	#####################################
	BS=512
	IMAGE_SIZE=$((8*1024*1024*1024))
	IMAGE_BLOCKS=$((IMAGE_SIZE/BS))
	## offset by BS blocks ##############
	LOADER_OFFSET=64
	UBOOT_OFFSET=16384
	TRUST_OFFSET=24576
	RESOURCE_OFFSET=40960
	ROOTFS_OFFSET=262144

	IMG="$BUILD_IMAGES/$IMAGE_FILE_NAME"

	RK_PARTS="## PARTS_BEGIN linux
	label: gpt
	label-id: 2A583E58-486A-4BD4-ACE4-8D5454E97F5C
	device: /dev/mmcblk2
	unit: sectors
	first-lba: 34
	last-lba: $((IMAGE_BLOCKS-34))

	/dev/mmcblk2p1 : start=	   $LOADER_OFFSET,   size=		8064, type=43784A32-A03D-4ADE-92C6-EDE64FF9B794, uuid=6115F139-4F47-4BAF-8D23-B6957EAEE4B3, name="loader1"
	/dev/mmcblk2p2 : start=	   $UBOOT_OFFSET,	size=		8192, type=000B305F-484A-4582-9090-4AD0099D47BD, uuid=A83FBA16-D354-45C5-8B44-3EC50832D363, name="uboot"
	/dev/mmcblk2p4 : start=	   32768,			size=		8192, type=1CAC805F-726A-495A-FD35-821355A6E7E8, uuid=E099DA71-5450-44EA-AA9F-1B771C582805, name="misc"
	/dev/mmcblk2p5 : start=	   $RESOURCE_OFFSET, size=	   32768, type=2BFEE623-D83C-426A-AB80-21732C9BB7D3, uuid=AF12D156-5D5B-4EE3-B415-8D492CA12EA9, name="resource"
	/dev/mmcblk2p6 : start=	   73728,			size=	  188416, type=B2AF085D-A675-48C6-C437-F6D557FF4744, uuid=8EB9EE49-E963-4BB6-FD75-F30618DF9DCD, name="kernel", attrs="LegacyBIOSBootable"
	/dev/mmcblk2p7 : start=	   $ROOTFS_OFFSET,					  type=2D9E7B61-1B31-47E7-EE0D-8CEC26D42EF6, uuid=614E0000-0000-4B53-8000-1D28000054A9, name="rootfs", attrs="LegacyBIOSBootable"
	"

	#CMD(){
	#	echo "# $@">&2
	#	$@
	#}

	DDN() {
	dd status=none conv=sparse,fsync,notrunc if="$1" of="$2" $3 $4 $5 $6
	}

	DD() {
	dd status=progress conv=sparse,fsync,notrunc if="$1" of="$2" $3 $4 $5 $6
	}

	rm -rf "$IMG"
	DDN /dev/zero "$IMG" seek=$((IMAGE_BLOCKS-1)) count=1
	#truncate -s$IMAGE_SIZE "$IMG"
	echo "$RK_PARTS" | sfdisk -q "$IMG" || {
	error_msg "sfdisk fail"
	return 1
	}
#	DDN "$UBOOT_IMAGE_DIR"/idbloader.img "$IMG" seek=$LOADER_OFFSET
	DDN "$UBOOT_IMAGE_DIR"/uboot.img	 "$IMG" seek=$UBOOT_OFFSET
#	DDN "$UBOOT_IMAGE_DIR"/trust.img	 "$IMG" seek=$TRUST_OFFSET
	DDN "$BUILD_IMAGES"/logo.img		 "$IMG" seek=$RESOURCE_OFFSET
	DD  "$BUILD_IMAGES"/rootfs.img	   "$IMG" seek=$ROOTFS_OFFSET

	ROOTFS_SIZE=$(stat -c%s "$BUILD_IMAGES"/rootfs.img)
	# minimize image
	truncate -s$((ROOTFS_OFFSET*BS+ROOTFS_SIZE)) "$IMG"

}

## Pack image
pack_image_platform() {

	if [ "$1" == "uboot-image" ]; then
		PACK_UBOOT_IMAGE="yes"
	else
		PACK_UBOOT_IMAGE="no"
	fi

	cd ${ROOT}

	info_msg "Image install type: $INSTALL_TYPE"
	if [ "$INSTALL_TYPE" == "EMMC" ]; then
		# Adjust u-boot links
		info_msg "Adjust u-boot links for uboot-$UBOOT"

		# resolve and check dir
		for UPGRADE_DIR_ in $UPGRADE_DIR; do
			[ -d "$UPGRADE_DIR_" ] || {
			error_msg "UPGRADE_DIR not exist: $UPGRADE_DIR"
			return 1
			}
		done

		# try resolve
		for UBOOT_DIR in $UBOOT_DIR; do
			[ -d "$UBOOT_DIR" ] || {
			error_msg "Not found $UBOOT_DIR"
			return 1
			}
		done

		D="$UPGRADE_DIR_/Rockchip"
		cd "$D/Image"
		#cd $UPGRADE_DIR/Rockchip/Image

		ln -fs "$UBOOT_DIR"/rk3588_spl_loader.bin rk3588_spl_loader.bin
		ln -fs "$UBOOT_DIR"/uboot.img		 uboot.img
#		ln -fs "$UBOOT_DIR"/trust.img		 trust.img

		cd "$D"

		# Fixup package-file
		if [ "$PACK_UBOOT_IMAGE" != "yes" ]; then
			ln -fs  rk3588-package-file package-file
		else
			IMAGE_FILE_NAME="${KHADAS_BOARD}_Uboot_EMMC_${IMAGE_VERSION}.img"
			ln -fs  rk3588-package-file-uboot-image package-file
		fi

		./afptool -pack ./ Image/update.img
		./rkImageMaker -RK3588 Image/rk3588_spl_loader.bin Image/update.img update.img -os_type:androidos
		mv ./update.img $BUILD_IMAGES/$IMAGE_FILE_NAME
		rm -rf Image/update.img
		info_msg "Making $BUILD_IMAGES/$IMAGE_FILE_NAME OK."
		cd - > /dev/null
	elif [ "$INSTALL_TYPE" == "SD-USB" ]; then
		if [ "$PACK_UBOOT_IMAGE" == "yes" ]; then
			IMAGE_FILE_NAME="${KHADAS_BOARD}_Uboot_SD_${IMAGE_VERSION}.img"
			info_msg "Create Uboot SD image..."
			dd if=/dev/zero of=${BUILD_IMAGES}/${IMAGE_FILE_NAME} bs=1M count=0 seek=16 > /dev/null 2>&1
		fi

		write_uboot_platform "$UBOOT_IMAGE_DIR" "$BUILD_IMAGES/$IMAGE_FILE_NAME"
	else
		error_msg "Unsupported install type: '$INSTALL_TYPE'"
		return 1
	fi

	echo ""
	info_msg "IMAGE: ${GREEN}$BUILD_IMAGES/$IMAGE_FILE_NAME ${ENDCOLOR} is ready!"
}

## tweaks for platform
tweaks_platform() {
	echo "#Serial console allow root" >> $ROOTFS_TEMP/etc/securetty
	echo "ttyFIQ0" >> $ROOTFS_TEMP/etc/securetty

	if [ "$LINUX" != "mainline" ]; then
		execute_in_chroot "systemctl --no-reload enable bluetooth-khadas.service fan.service edge2-station.service"
	fi

	# Create boot links
	if [ "$INSTALL_TYPE" == "EMMC" ]; then
		execute_in_chroot "ln -fs /boot/Image Image"
		execute_in_chroot "ln -fs /boot/initrd.img initrd.img"
		execute_in_chroot "ln -fs /boot/dtb/rockchip/rk3588s-khadas-edge2.dtb dtb.img"
		execute_in_chroot "ln -fs /boot/dtb dtb"
	else
		if [ "$LINUX" != "mainline" ]; then
			execute_in_chroot "ln -fs dtb/rockchip/rk3588s-khadas-edge2.dtb /boot/dtb.img"
		fi
	fi

	if [ "$DISTRIB_RELEASE" == "noble" ]; then
		execute_in_chroot "systemctl --no-reload enable gdm_multi_screen_display.service"
	fi
}

# customize for platform
customize_platform() {
	if [ "$PANFORK_SUPPORT" == "yes" ]; then
		info_msg "Preparing panfork GPU"

		mount_chroot "$ROOTFS_TEMP"

		if [ "$DISTRIB_RELEASE" == "noble" ]; then
			if [ "$LINUX" == "6.1" ] || [ "$LINUX" == "mainline" ]; then
				cat <<-EOF | tee $ROOTFS_TEMP/etc/apt/sources.list.d/kisaku-panfork-mesa-noble.list
				deb https://ppa.launchpadcontent.net/kisak/kisak-mesa/ubuntu noble main
				# deb-src deb https://ppa.launchpadcontent.net/kisak/kisak-mesa/ubuntu noble main
				EOF

				cp $CONFIG/panfork-kisak.key $ROOTFS_TEMP
				eval 'LC_ALL=C LANG=C chroot $ROOTFS_TEMP /bin/bash -c "cat panfork-kisak.key | gpg --dearmor -o /etc/apt/trusted.gpg.d/panfork-kisak.gpg"'
				rm $ROOTFS_TEMP/panfork-kisak.key
			elif [ "$LINUX" == "5.10" ]; then
				cat <<-EOF | tee $ROOTFS_TEMP/etc/apt/sources.list.d/jjriek-ubuntu-panfork-mesa-noble.list
				deb https://ppa.launchpadcontent.net/jjriek/panfork-mesa/ubuntu/ noble main
				# deb-src deb https://ppa.launchpadcontent.net/jjriek/panfork-mesa/ubuntu/ noble main
				EOF

				cp $CONFIG/panfork-jjriek.key $ROOTFS_TEMP
				eval 'LC_ALL=C LANG=C chroot $ROOTFS_TEMP /bin/bash -c "cat panfork-jjriek.key | gpg --dearmor -o /etc/apt/trusted.gpg.d/panfork-jjriek.gpg"'
				rm $ROOTFS_TEMP/panfork-jjriek.key
			fi
		fi

		if [ "$DISTRIB_RELEASE" == "jammy" ]; then
			cat <<-EOF | tee $ROOTFS_TEMP/etc/apt/sources.list.d/kisaku-panfork-mesa-jammy.list
			deb https://ppa.launchpadcontent.net/kisak/kisak-mesa/ubuntu jammy main
			# deb-src https://ppa.launchpadcontent.net/kisak/kisak-mesa/ubuntu jammy main
			EOF
			cp $CONFIG/panfork-kisak.key $ROOTFS_TEMP
			eval 'LC_ALL=C LANG=C chroot $ROOTFS_TEMP /bin/bash -c "cat panfork-kisak.key | gpg --dearmor -o /etc/apt/trusted.gpg.d/panfork-kisak.gpg"'
			rm $ROOTFS_TEMP/panfork-kisak.key
		fi

		# this should fix resolvconf installation failure in some cases
		eval 'LC_ALL=C LANG=C chroot $ROOTFS_TEMP /bin/bash -c "echo "resolvconf resolvconf/linkify-resolvconf boolean false" | debconf-set-selections"'

		rm $ROOTFS_TEMP/etc/resolv.conf
		echo "nameserver $NAMESERVER" >> $ROOTFS_TEMP/etc/resolv.conf

		# stage: update packages list
		info_msg "Updating package list $DISTRIB_RELEASE"
		eval 'LC_ALL=C LANG=C chroot $ROOTFS_TEMP /bin/bash -c "DEBIAN_FRONTEND=noninteractive apt-get -y $apt_extra update"'
		eval 'LC_ALL=C LANG=C chroot $ROOTFS_TEMP /bin/bash -c "DEBIAN_FRONTEND=noninteractive apt-get -y $apt_extra upgrade"'
		eval 'LC_ALL=C LANG=C chroot $ROOTFS_TEMP /bin/bash -c "DEBIAN_FRONTEND=noninteractive apt-get -y $apt_extra install libegl-mesa0 libgbm1 libglapi-mesa libglx-mesa0"'

		umount_chroot "$ROOTFS_TEMP"
	elif [ "$LINUX" == "5.10" ] && [ "$DISTRIB_RELEASE" == "noble" ]; then
		info_msg "Preparing MALI GPU"

		mount_chroot "$ROOTFS_TEMP"

		cp $ROOT/archives/filesystem/special/Edge2/lib/firmware/mali_csffw.bin $ROOTFS_TEMP/lib/firmware/mali_csffw.bin
		rm $ROOTFS_TEMP/lib/firmware/mali_csffw.bin

		umount_chroot "$ROOTFS_TEMP"
	fi
}

# Build deb packages for platform
build_deb_packages_platform() {

	if [ "$DISTRIB_TYPE" == "minimal" ]; then
		warning_msg "Ignore build platform packages for minimal image."
		return 0
	fi

	if [ "$LINUX" == "6.1" ] && [ "$DISTRIB_TYPE" != "server" ]; then
		if ([ "$DISTRIB_RELEASE" == "noble" ] || [ "$DISTRIB_RELEASE" == "bookworm" ]) && [ "$PANFORK_SUPPORT" != "yes" ]; then
			info_msg "Building mali-debs package..."
			# FIXME
			# remove build stamp to force build for other arch
			rm -rf $BUILD/.stamps/mali-debs
			build_package "mali-debs:target"
		fi
	elif [ "$LINUX" == "5.10" ] && [ "$DISTRIB_TYPE" != "server" ]; then
		if ([ "$DISTRIB_RELEASE" == "jammy" ] || [ "$DISTRIB_RELEASE" == "noble" ] || [ "$DISTRIB_RELEASE" == "bookworm" ]) && [ "$PANFORK_SUPPORT" != "yes" ]; then
			info_msg "Building mali-debs package..."
			# FIXME
			# remove build stamp to force build for other arch
			rm -rf $BUILD/.stamps/mali-debs
			build_package "mali-debs:target"
		fi
	fi

	if [ "$LINUX" == "6.1" ] || [ "$LINUX" == "5.10" ]; then
		info_msg "Building mpp..."
		# FIXME
		# remove build stamp to force build for other arch
		rm -rf $BUILD/.stamps/mpp-rockchip-debs
		build_package "mpp-rockchip-debs:target"

		info_msg "Building rga..."
		# FIXME
		# remove build stamp to force build for other arch
		rm -rf $BUILD/.stamps/rga-rockchip-debs
		build_package "rga-rockchip-debs:target"

		info_msg "Building gstreamer..."
		# FIXME
		# remove build stamp to force build for other arch
		rm -rf $BUILD/.stamps/gstreamer-rockchip-debs
		build_package "gstreamer-rockchip-debs:target"

		info_msg "Building rkaiq..."
		# FIXME
		# remove build stamp to force build for other arch
		rm -rf $BUILD/.stamps/rkaiq-rockchip-debs
		build_package "rkaiq-rockchip-debs:target"

		if [ "$DISTRIB_RELEASE" == "noble" ] && [ "$DISTRIB_TYPE" != "server" ]; then
			info_msg "Building chromium-debs package..."
			# FIXME
			# remove build stamp to force build for other arch
			rm -rf $BUILD/.stamps/chromium-debs
			build_package "chromium-debs:target"
		fi
	fi
}

# Install deb packages for platform
install_deb_packages_platform() {

	if [ "$DISTRIB_TYPE" == "minimal" ]; then
		warning_msg "Ignore install platform packages for minimal image."
		return 0
	fi

	if [ "$LINUX" == "6.1" ] && [ "$DISTRIB_TYPE" != "server" ]; then
		if ([ "$DISTRIB_RELEASE" == "noble" ] || [ "$DISTRIB_RELEASE" == "bookworm" ]) && [ "$PANFORK_SUPPORT" != "yes" ]; then
			info_msg "Installing mali-debs package ..."
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/$DISTRIBUTION-$DISTRIB_RELEASE/mali-debs/${GPU_PLATFORM}/*.deb
		fi
	elif [ "$LINUX" == "5.10" ] && [ "$DISTRIB_TYPE" != "server" ]; then
		if ([ "$DISTRIB_RELEASE" == "jammy" ] || [ "$DISTRIB_RELEASE" == "noble" ] || [ "$DISTRIB_RELEASE" == "bookworm" ]) && [ "$PANFORK_SUPPORT" != "yes" ]; then
			info_msg "Installing mali-debs package ..."
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/$DISTRIBUTION-$DISTRIB_RELEASE/mali-debs/${GPU_PLATFORM}/*.deb
		fi
	fi

	if [ "$LINUX" == "6.1" ]  || [ "$LINUX" == "5.10" ]; then

		# Install mpp in chroot
		info_msg "Installing mpp..."
		if [ "$DISTRIB_RELEASE" == "jammy" ] || [ "$DISTRIB_RELEASE" == "bookworm" ]; then
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mpp-rockchip-debs/rockchip-mpp_*.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mpp-rockchip-debs/rockchip-mpp-sample_*.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mpp-rockchip-debs/rockchip-mpp-dev_*.deb
		fi
		if [ "$DISTRIB_RELEASE" == "noble" ]; then
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mpp-rockchip-debs/librockchip-mpp1_*.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mpp-rockchip-debs/librockchip-mpp-dev_*.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mpp-rockchip-debs/librockchip-vpu0_*.deb
		fi

		# Install rga in chroot
		info_msg "Installing rga..."
		if [ "$DISTRIB_RELEASE" == "jammy" ] || [ "$DISTRIB_RELEASE" == "bookworm" ]; then
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/rga-rockchip-debs/rockchip-rga_*.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/rga-rockchip-debs/rockchip-rga-sample_*.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/rga-rockchip-debs/rockchip-rga-dev_*.deb
		fi
		if [ "$DISTRIB_RELEASE" == "noble" ]; then
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/rga-rockchip-debs/librga2_*.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/rga-rockchip-debs/librga-dev_*_arm64.deb
		fi

		# Install gstreamer in chroot
		info_msg "Installing gstreamer..."
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/gstreamer-rockchip-debs/*.deb
		if [ "$DISTRIB_RELEASE" == "noble" ] || [ "$DISTRIB_RELEASE" == "jammy" ] || [ "$DISTRIB_RELEASE" == "bookworm" ]; then
			# gstreamer1.0
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/gstreamer-rockchip-debs/gstreamer1.0-debs/libgstreamer1.0-0_*.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/gstreamer-rockchip-debs/gstreamer1.0-debs/gir1.2-gstreamer-1.0_*.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/gstreamer-rockchip-debs/gstreamer1.0-debs/gstreamer1.0-tools_*.deb

			# gst-plugins-base1.0
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/gstreamer-rockchip-debs/gst-plugins-base1.0-debs/libgstreamer-plugins-base1.0-0_*.deb
			#install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/gstreamer-rockchip-debs/gst-plugins-base1.0-debs/libgstreamer-gl1.0-0_*.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/gstreamer-rockchip-debs/gst-plugins-base1.0-debs/gstreamer1.0-plugins-base_*.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/gstreamer-rockchip-debs/gst-plugins-base1.0-debs/gstreamer1.0-plugins-base-apps_*.deb
			#install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/gstreamer-rockchip-debs/gst-plugins-base1.0-debs/gstreamer1.0-x_*.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/gstreamer-rockchip-debs/gst-plugins-base1.0-debs/gstreamer1.0-alsa_*.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/gstreamer-rockchip-debs/gst-plugins-base1.0-debs/gir1.2-gst-plugins-base-1.0_*.deb

			# gst-plugins-good1.0
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/gstreamer-rockchip-debs/gst-plugins-good1.0-debs/libgstreamer-plugins-good1.0-0_*.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/gstreamer-rockchip-debs/gst-plugins-good1.0-debs/gstreamer1.0-plugins-good_*.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/gstreamer-rockchip-debs/gst-plugins-good1.0-debs/gstreamer1.0-pulseaudio_*.deb

			# gst-plugins-bad1.0
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/gstreamer-rockchip-debs/gst-plugins-bad1.0-debs/libgstreamer-plugins-bad1.0-0_*.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/gstreamer-rockchip-debs/gst-plugins-bad1.0-debs/gstreamer1.0-plugins-bad_*.deb
		fi

		# Install rkaiq in chroot
		info_msg "Installing rkaiq..."
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/rkaiq-rockchip-debs/*.deb

		if [ "$DISTRIB_RELEASE" == "noble" ] && [ "$DISTRIB_TYPE" == "gnome" ]; then
			info_msg "Installing chromium-debs package ..."
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/chromium-debs/chromium-common_*.deb
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/chromium-debs/chromium_*.deb
		fi
	fi
}
