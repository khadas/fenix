# Khadas Edge Rockchip RK3399
SUPPORTED_UBOOT=("2017.09" "mainline")
SUPPORTED_LINUX=("4.4" "mainline")

case "$UBOOT" in
	2017.09)
		UBOOT_DEFCONFIG="kedge_defconfig"
		UBOOT_GIT_BRANCH="khadas-edge-v2017.09"
		UBOOT_DIR="$ROOT/u-boot"
		UBOOT_IMAGE_DIR="$UBOOT_DIR"
		UBOOT_IMAGE_FILES="MiniLoaderAll.bin MiniLoaderAll_spinor.bin trust.img uboot.img"
		;;
	mainline)
		UBOOT_DEFCONFIG="kedge-rk3399_defconfig"
		UBOOT_GIT_BRANCH="master"
		UBOOT_DIR="$BUILD/u-boot-mainline-*"
		UBOOT_IMAGE_DIR="$BUILD_IMAGES/u-boot-mainline/$KHADAS_BOARD"
		UBOOT_IMAGE_FILES="idbloader.img trust.img uboot.img"
		;;
esac

UBOOT_FORCE_REBUILD="no"

UBOOT_COMPILER="aarch64-linux-gnu-"
UBOOT_COMPILER_PATH="$TOOLCHAINS/gcc-linaro-aarch64-linux-gnu/bin"
KERNEL_COMPILER="aarch64-linux-gnu-"
KERNEL_COMPILER_PATH="$TOOLCHAINS/gcc-linaro-aarch64-linux-gnu/bin"

case "$LINUX" in
	4.4)
		LINUX_DTB="arch/arm64/boot/dts/rockchip/rk3399-khadas-edge-linux.dtb"
		LINUX_DIR="$ROOT/linux"
		LINUX_GIT_BRANCH="khadas-edge-4.4.y"
		LINUX_DEFCONFIG="kedge_defconfig"
		SERIALCON="ttyFIQ0"
		BOOT_SCRIPT_BOARD="rk3399_autoscript.cmd"
		GPU_VER="r14p0"
		if [ "$DISTRIB_TYPE" != "server" ]; then
			GPU_PLATFORM="x11"
		else
			GPU_PLATFORM="gbm"
		fi
		MODULES="bcmdhd aufs"
		;;
	mainline)
		LINUX_DTB="arch/arm64/boot/dts/rockchip/rk3399-khadas-edge.dtb"
		LINUX_DIR="$BUILD/linux-mainline-*"
		LINUX_GIT_BRANCH="master"
		LINUX_DEFCONFIG="defconfig"
		SERIALCON="ttyS2"
		BOOT_SCRIPT_BOARD="rk3399_autoscript.cmd"
		GPU_VER="r14p0"
		if [ "$DISTRIB_TYPE" != "server" ]; then
			GPU_PLATFORM="x11"
		else
			GPU_PLATFORM="gbm"
		fi
		MODULES="brcmfmac"
		;;
esac

BOOT_SCRIPT_VENDOR="rockchip_autoscript.txt"

BOOT_INI="rockchip_boot.ini"
BOOT_ENV_FILE="rockchip_default_env.txt"

CPUMIN="600000"
CPUMAX="2016000"
GOVERNOR="ondemand"

####
WIFI_MODEL="Broadcom"
GPU_MODEL="arm-mali-midgard-t86x"

##############################
uboot_custom_postprocess() {
	cd $UBOOT_DIR

	# Cleanup old binaries
	rm -rf uboot.img trust.img MiniLoaderAll.bin MiniLoaderAll_spinor.bin u-boot-spi.bin

	UBOOT_LOAD_ADDR=`sed -n "/CONFIG_SYS_TEXT_BASE=/s/CONFIG_SYS_TEXT_BASE=//p" include/autoconf.mk|tr -d '\r'`
	info_msg "Packing uboot.img..."
	$BUILD/rkbin-*/tools/loaderimage --pack --uboot ./u-boot.bin uboot.img ${UBOOT_LOAD_ADDR}
	rm u-boot.img u-boot-dtb.img

	info_msg "Packing idbloader.img..."
	tools/mkimage -n rk3399 -T rksd -d $BUILD/rkbin-*/rk3399_ddr.bin idbloader.img
	cat $BUILD/rkbin-*/rk3399miniloaderall.bin >> idbloader.img
	info_msg "pack idbloader.img okay!"

	cd $BUILD/rkbin-*
	info_msg "Packing SPI/NOR miniloader..."
	$BUILD/rkbin-*/tools/boot_merger --replace tools/rk_tools/ ./ $BUILD/rkbin-*/RKBOOT/RK3399MINIALL_SPINOR.ini
	cd -
	mv $BUILD/rkbin-*/*_loader_spinor_*.bin ./MiniLoaderAll_spinor.bin

	cd $BUILD/rkbin-*
	info_msg "Packing eMMC miniloader..."
	$BUILD/rkbin-*/tools/boot_merger --replace tools/rk_tools/ ./ $BUILD/rkbin-*/RKBOOT/RK3399MINIALL.ini
	cd -
	mv $BUILD/rkbin-*/*_loader_*.bin ./MiniLoaderAll.bin

	cd $BUILD/rkbin-*
	info_msg "Packing trust.img..."
	$BUILD/rkbin-*/tools/trust_merger --replace tools/rk_tools/ ./ $BUILD/rkbin-*/RKTRUST/RK3399TRUST.ini
	cd -
	mv $BUILD/rkbin-*/trust.img ./trust.img

	if [ "$UBOOT" == "2017.09" ]; then
		# Merge SPI U-boot
		info_msg "Merge SPI U-boot..."
		cd $BUILD/rkbin-*
		# Fixup links
		ln -fs ../../u-boot/uboot.img uboot.img
		ln -fs ../../u-boot/trust.img trust.img
		chmod +x firmware_merger
		./firmware_merger -P rk3399_spi.ini ./
		mv Firmware.img $UBOOT_DIR/u-boot-spi.bin
		rm Firmware.md5 uboot.img trust.img
	fi

	cd $ROOT
}

## Write u-boot
write_uboot_platform()
{
	dd if=$1/idbloader.img of=$2 seek=64 conv=notrunc > /dev/null 2>&1
	dd if=$1/uboot.img of=$2 seek=16384 conv=notrunc > /dev/null 2>&1
	dd if=$1/trust.img of=$2 seek=24576 conv=notrunc > /dev/null 2>&1
}

setup_write_uboot_platform()
{
	if grep -q "ubootpart" /proc/cmdline; then
		local tmp=$(cat /proc/cmdline)
		local ubootpart="${tmp##*ubootpart=}"
		local imagetype="${tmp##*imagetype=}"
		ubootpart="${ubootpart%% *}"
		imagetype="${imagetype%% *}"

		if [ "$imagetype" == "SD-USB" ] || [ "$imagetype" == "EMMC_MBR" ]; then
			[[ -n $ubootpart && $ubootpart != NULL ]] && local part=$(findfs PARTUUID=$ubootpart 2>/dev/null)
			[[ -n $part ]] && local dev=$(lsblk -n -o PKNAME $part 2>/dev/null)
			[[ -n $dev ]] && DEVICE="/dev/$dev"
		elif [ "$imagetype" == "EMMC" ]; then
			# For vendor eMMC image, need to update in u-boot
			DEVICE="VENDOR"
		fi
	fi
}

# Compatible with AndroidTool one image burning
COMPATIBLE_ANDROID_TOOL=yes

## Pack image
pack_image_platform() {
    cd ${ROOT}

    info_msg "Image install type: $INSTALL_TYPE"
    if [ "$INSTALL_TYPE" == "EMMC" ]; then

		if [ "$COMPATIBLE_ANDROID_TOOL" != "yes" ]; then

			info_msg "Packing image not compatible with AndroidTool one image burning..."

			LOADER1_SIZE=8000
			RESERVED1_SIZE=128
			RESERVED2_SIZE=8192
			LOADER2_SIZE=8192
			ATF_SIZE=8192
			BOOT_SIZE=229376

			SYSTEM_START=0
			LOADER1_START=64
			RESERVED1_START=$(expr ${LOADER1_START} + ${LOADER1_SIZE})
			RESERVED2_START=$(expr ${RESERVED1_START} + ${RESERVED1_SIZE})
			LOADER2_START=$(expr ${RESERVED2_START} + ${RESERVED2_SIZE})
			ATF_START=$(expr ${LOADER2_START} + ${LOADER2_SIZE})
			BOOT_START=$(expr ${ATF_START} + ${ATF_SIZE})
			ROOTFS_START=$(expr ${BOOT_START} + ${BOOT_SIZE})

			IMG_ROOTFS_SIZE=$(stat -L --format="%s" ${BUILD_IMAGES}/rootfs.img)
			GPTIMG_MIN_SIZE=$(expr $IMG_ROOTFS_SIZE + \( ${LOADER1_SIZE} + ${RESERVED1_SIZE} + ${RESERVED2_SIZE} + ${LOADER2_SIZE} + ${ATF_SIZE} + ${BOOT_SIZE} + 35 \) \* 512)
			GPT_IMAGE_SIZE=$(expr $GPTIMG_MIN_SIZE \/ 1024 \/ 1024 + 2)

			dd if=/dev/zero of=${BUILD_IMAGES}/${IMAGE_FILE_NAME} bs=1M count=0 seek=$GPT_IMAGE_SIZE

			parted -s ${BUILD_IMAGES}/${IMAGE_FILE_NAME} mklabel gpt
			parted -s ${BUILD_IMAGES}/${IMAGE_FILE_NAME} unit s mkpart loader1 ${LOADER1_START} $(expr ${RESERVED1_START} - 1)
			# parted -s ${BUILD_IMAGES}/${IMAGE_FILE_NAME} unit s mkpart reserved1 ${RESERVED1_START} $(expr ${RESERVED2_START} - 1)
			# parted -s ${BUILD_IMAGES}/${IMAGE_FILE_NAME} unit s mkpart reserved2 ${RESERVED2_START} $(expr ${LOADER2_START} - 1)
			parted -s ${BUILD_IMAGES}/${IMAGE_FILE_NAME} unit s mkpart loader2 ${LOADER2_START} $(expr ${ATF_START} - 1)
			parted -s ${BUILD_IMAGES}/${IMAGE_FILE_NAME} unit s mkpart trust ${ATF_START} $(expr ${BOOT_START} - 1)
			parted -s ${BUILD_IMAGES}/${IMAGE_FILE_NAME} unit s mkpart boot ${BOOT_START} $(expr ${ROOTFS_START} - 1)
			parted -s ${BUILD_IMAGES}/${IMAGE_FILE_NAME} set 4 boot on
			parted -s ${BUILD_IMAGES}/${IMAGE_FILE_NAME} -- unit s mkpart rootfs ${ROOTFS_START} -34s
			parted -s ${BUILD_IMAGES}/${IMAGE_FILE_NAME} set 5 boot on

			ROOT_UUID="B921B045-1DF0-41C3-AF44-4C6F280D3FAE"

			gdisk ${BUILD_IMAGES}/${IMAGE_FILE_NAME} <<-EOF
			x
			c
			5
			${ROOT_UUID}
			w
			y
			EOF

			# burn u-boot
			dd if=${UBOOT_DIR}/idbloader.img of=${BUILD_IMAGES}/${IMAGE_FILE_NAME} seek=${LOADER1_START} conv=notrunc

			dd if=${UBOOT_DIR}/uboot.img of=${BUILD_IMAGES}/${IMAGE_FILE_NAME} seek=${LOADER2_START} conv=notrunc
			dd if=${UBOOT_DIR}/trust.img of=${BUILD_IMAGES}/${IMAGE_FILE_NAME} seek=${ATF_START} conv=notrunc

			# burn rootfs image
			info_msg "Burning rootfs image..."
			dd if=${BUILD_IMAGES}/rootfs.img bs=1M status=none | pv -p -b -r -s $IMG_ROOTFS_SIZE | dd status=none  conv=notrunc,fsync seek=${ROOTFS_START} of=${BUILD_IMAGES}/${IMAGE_FILE_NAME}

			info_msg "Sync..."
			sync

		else
			info_msg "Packing image compatible with AndroidTool one image burning..."

			# Adjust u-boot links
			info_msg "Adjust u-boot links for uboot-$UBOOT"
			cd $UPGRADE_DIR/Rockchip/Image
			case "$UBOOT" in
				2017.09)
					ln -fs ../../../../u-boot/MiniLoaderAll.bin MiniLoaderAll.bin
					ln -fs ../../../../u-boot/uboot.img uboot.img
					ln -fs ../../../../u-boot/trust.img trust.img
					;;
				mainline)
					ln -fs ../../../u-boot-mainline-[0-9a-f]*/MiniLoaderAll.bin MiniLoaderAll.bin
					ln -fs ../../../u-boot-mainline-[0-9a-f]*/uboot.img uboot.img
					ln -fs ../../../u-boot-mainline-[0-9a-f]*/trust.img trust.img
					;;
			esac

			cd $UPGRADE_DIR/Rockchip
			./afptool -pack ./ Image/update.img
			./rkImageMaker -RK330C Image/MiniLoaderAll.bin Image/update.img update.img -os_type:androidos
			mv ./update.img $BUILD_IMAGES/$IMAGE_FILE_NAME
			rm -rf Image/update.img
			info_msg "Making $BUILD_IMAGES/$IMAGE_FILE_NAME OK."

			cd -
		fi

	elif [ "$INSTALL_TYPE" == "SD-USB" ]; then

        IMAGE_LOOP_DEV="$(losetup --show -f ${BUILD_IMAGES}/${IMAGE_FILE_NAME})"
		if [[ -z $IMAGE_LOOP_DEV ]]; then
			error_msg "Unable to find free loop device!"
			return -1
		fi

		partprobe "${IMAGE_LOOP_DEV}"

		check_loop_device "$IMAGE_LOOP_DEV"

		case "$UBOOT" in
			mainline)
				local uboot_sd_image_dir="$BUILD_IMAGES/u-boot-mainline/$KHADAS_BOARD"
				;;
			2017.09)
				local uboot_sd_image_dir="$ROOT/u-boot"
				;;
		esac

		write_uboot_platform ${UBOOT_IMAGE_DIR} ${BUILD_IMAGES}/${IMAGE_FILE_NAME}

        losetup -d "${IMAGE_LOOP_DEV}"
    else
        error_msg "Unsupported install type: '$INSTALL_TYPE'"
        return -1
    fi

	echo ""
    info_msg "IMAGE: ${GREEN}$BUILD_IMAGES/$IMAGE_FILE_NAME ${ENDCOLOR} is ready!"
}

## tweaks for platform
tweaks_platform() {
	echo "#Serial console allow root" >> $ROOTFS_TEMP/etc/securetty
	echo "ttyFIQ0" >> $ROOTFS_TEMP/etc/securetty

	# Enable services
	eval 'LC_ALL=C LANG=C chroot $ROOTFS_TEMP /bin/bash -c "systemctl --no-reload enable fan.service bluetooth-khadas.service"'

	# Create boot links
	if [ "$INSTALL_TYPE" == "EMMC" ]; then
		eval 'LC_ALL=C LANG=C chroot $ROOTFS_TEMP /bin/bash -c "ln -fs /boot/zImage zImage"'
		eval 'LC_ALL=C LANG=C chroot $ROOTFS_TEMP /bin/bash -c "ln -fs /boot/uInitrd uInitrd"'
		eval 'LC_ALL=C LANG=C chroot $ROOTFS_TEMP /bin/bash -c "ln -fs /boot/dtb/rk3399-khadas-edge-linux.dtb dtb.img"'
	fi
}

# Build deb packages for platform
build_deb_packages_platform() {

	if [ "$DISTRIB_RELEASE" == "bionic" ]; then
		info_msg "Building mpp..."
		# FIXME
		# remove build stamp to force build for other arch
		if [ ! -d BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mpp ]; then
		rm -rf $BUILD/.stamps/mpp_rk3399
		fi
		build_package "mpp_rk3399:target"

		info_msg "Building kodi..."
		# FIXME
		# remove build stamp to force build for other arch
		if [ ! -d BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/kodi ]; then
			rm -rf $BUILD/.stamps/kodi_rk3399
		fi
		build_package "kodi_rk3399:target"
	fi

	if [ "$DISTRIB_TYPE" != "server" ]; then
		info_msg "Building xserver..."
		# FIXME
		# remove build stamp to force build for other arch
		if [ ! -d $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/xserver ]; then
			rm -rf $BUILD/.stamps/xserver_rk3399
		fi
		build_package "xserver_rk3399:target"

		if [ "$DISTRIB_RELEASE" == "stretch" ] || [ "$DISTRIB_RELEASE" == "bionic" ]; then
			info_msg "Building gstreamer..."
			# FIXME
			# remove build stamp to force build for other arch
			if [ ! -d BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/gstreamer ]; then
				rm -rf $BUILD/.stamps/gstreamer_rk3399
			fi
			build_package "gstreamer_rk3399:target"

			if [ "$DISTRIB_RELEASE" == "stretch" ] || [ "$DISTRIB_RELEASE" == "bionic" ]; then
				info_msg "Building qt..."
				# FIXME
				# remove build stamp to force build for other arch
				if [ ! -d BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/qt ]; then
					rm -rf $BUILD/.stamps/qt_rk3399
				fi
				build_package "qt_rk3399:target"
			fi
		fi
	fi

	info_msg "Building libdrm..."
	# FIXME
	# remove build stamp to force build for other arch
	if [ ! -d BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/libdrm ]; then
		rm -rf $BUILD/.stamps/libdrm_rk3399
	fi
	build_package "libdrm_rk3399:target"
}

# Install deb packages for platform
install_deb_packages_platform() {

	if [ "$DISTRIB_RELEASE" == "bionic" ]; then
		# Install mpp in chroot
		info_msg "Installing mpp..."
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mpp/librockchip-mpp1_*.deb
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mpp/librockchip-mpp-dev_*.deb
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/mpp/librockchip-vpu0_*.deb

		# Install kodi in chroot
		info_msg "Installing kodi..."

		debs=$(ls $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/kodi/deps/*.deb)
		for deb in $debs
		do
			install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/kodi/deps/$(basename $deb)
		done
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/kodi/kodi-bin_*.deb
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/kodi/kodi_*.deb
	fi

	if [ "$DISTRIB_TYPE" != "server" ]; then

		cd $ROOT

		# Install xserver in chroot
		info_msg "Installing xserver..."
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/xserver/xserver-common_*.deb
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/xserver/xserver-xephyr_*.deb
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/xserver/xserver-xorg-core_*.deb
		install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/xserver/xserver-xorg-dev_*.deb

		if [ "$DISTRIB_RELEASE" == "stretch" ] || [ "$DISTRIB_RELEASE" == "bionic" ]; then

			# Install gstreamer in chroot
			info_msg "Installing gstreamer..."
			debs=$(ls $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/gstreamer/*.deb)
			for deb in $debs
			do
				install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/gstreamer/$(basename $deb)
			done

			if [ "$DISTRIB_RELEASE" == "stretch" ] || [ "$DISTRIB_RELEASE" == "bionic" ]; then
				# Install qt in chroot
				info_msg "Installing qt..."
				debs=$(ls $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/qt/*.deb)
				for deb in $debs
				do
					install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/qt/$(basename $deb)
				done
			fi
		fi
	fi

	cd $ROOT

	# Install libdrm in chroot
	info_msg "Installing libdrm..."
	install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/libdrm/libdrm2_*.deb
	install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/libdrm/libdrm2-dbg_*.deb
	install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/libdrm/libdrm-rockchip1_*.deb
	install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/libdrm/libdrm-rockchip1-dbgsym_*.deb
	install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/libdrm/libdrm-dev_*.deb
	install_deb_chroot $BUILD_DEBS/$VERSION/$KHADAS_BOARD/${DISTRIBUTION}-${DISTRIB_RELEASE}/libdrm/libdrm-amdgpu1_*.deb
}
