From b9a31bbe3fc1dcb224a4e6b5be0e6df5480ca3aa Mon Sep 17 00:00:00 2001
From: Nick Xie <nick@khadas.com>
Date: Fri, 20 Dec 2019 17:31:39 +0800
Subject: [PATCH] VIMs: add kbi support (WiP)

Signed-off-by: Nick Xie <nick@khadas.com>
---
 cmd/Kconfig                    |   1 -
 cmd/kbi.c                      | 462 ++++++++++++++++++++---------------------
 configs/khadas-vim2_defconfig  |   4 +
 configs/khadas-vim3_defconfig  |   6 +-
 configs/khadas-vim3l_defconfig |   3 +
 configs/khadas-vim_defconfig   |   3 +
 6 files changed, 241 insertions(+), 238 deletions(-)

diff --git a/cmd/Kconfig b/cmd/Kconfig
index b9242e9..0f13d0d 100644
--- a/cmd/Kconfig
+++ b/cmd/Kconfig
@@ -2146,7 +2146,6 @@ config CMD_UBIFS
 
 config CMD_KHADAS_KBI
 	bool "Khadas Bootloader Instructions"
-	depends on TARGET_EVB_RK3399
 	help
 	  Khadas Bootloader Instructions
 
diff --git a/cmd/kbi.c b/cmd/kbi.c
index 8b55c28..ef2bae7 100644
--- a/cmd/kbi.c
+++ b/cmd/kbi.c
@@ -11,16 +11,20 @@
 #include <malloc.h>
 #include <asm/byteorder.h>
 #include <linux/compiler.h>
-//#include <asm/arch/io.h>
 #include <asm/u-boot.h>
-//#include <asm/arch/rkplat.h>
-//#include <../board/rockchip/common/storage/storage.h>
-//#include "asm/arch-rockchip/vendor.h"
 
 #define CHIP_ADDR              0x18
 #define CHIP_ADDR_CHAR         "0x18"
 #define I2C_SPEED              100000
-#define MCU_I2C_BUS_NUM		   8
+#if defined (CONFIG_ARCH_ROCKCHIP)
+	#define MCU_I2C_BUS_NUM		   8
+#else
+	#if defined (CONFIG_MESON_GXM) || defined (CONFIG_MESON_GXL)
+		#define MCU_I2C_BUS_NUM        1
+	#elif defined (CONFIG_MESON_G12A)
+		#define MCU_I2C_BUS_NUM        0
+	#endif
+#endif
 
 #define REG_PASSWD_VENDOR       0x00
 #define REG_MAC                 0x06
@@ -39,6 +43,10 @@
 #define REG_ADC                 0x2a
 #define REG_MAC_SWITCH          0x2d
 
+#if defined(CONFIG_MESON_G12A)
+#define REG_PORT_MODE           0x33
+#endif
+
 #define REG_PASSWD_CUSTOM       0x40
 
 #define REG_POWER_OFF           0x80
@@ -75,19 +83,33 @@
 #define PASSWD_CUSTOM_LENGHT  6
 #define PASSWD_VENDOR_LENGHT  6
 
-// Board Detect
-#define BOARD_DETECT_ADC_DEVIATION      10
-#define BOARD_DETECT_ADC_VALUE_EDGE     1024
-#define BOARD_DETECT_ADC_VALUE_EDGEV    204
-#define BOARD_DETECT_ADC_VALUE_CAPTAIN  170
-
-#define BOARD_TYPE_EDGE     1   /* Single Edge Board */
-#define BOARD_TYPE_EDGEV    2   /* Single Edge V Board */
-#define BOARD_TYPE_CAPTAIN  3   /* Edge with Captain */
-#define BOARD_TYPE_UNKNOW   0   /* Unknow board */
-
-
-//extern int vendor_storage_init(void);
+#if defined (CONFIG_ARCH_ROCKCHIP)
+	// Board Detect
+	#define BOARD_DETECT_ADC_DEVIATION      10
+	#define BOARD_DETECT_ADC_VALUE_EDGE     1024
+	#define BOARD_DETECT_ADC_VALUE_EDGEV    204
+	#define BOARD_DETECT_ADC_VALUE_CAPTAIN  170
+
+	#define BOARD_TYPE_EDGE     1   /* Single Edge Board */
+	#define BOARD_TYPE_EDGEV    2   /* Single Edge V Board */
+	#define BOARD_TYPE_CAPTAIN  3   /* Edge with Captain */
+	#define BOARD_TYPE_UNKNOW   0   /* Unknow board */
+#else
+	#define HW_VERSION_ADC_VALUE_TOLERANCE   0x28
+	#define HW_VERSION_ADC_VAL_VIM1_V12      0x7FE
+	#define HW_VERSION_ADC_VAL_VIM1_V14      0xA1E
+	#define HW_VERSION_ADC_VAL_VIM2_V12      0x805
+	#define HW_VERSION_ADC_VAL_VIM2_V14      0xA20
+	#define HW_VERSION_ADC_VAL_VIM3_V11      0x200
+	#define HW_VERSION_ADC_VAL_VIM3_V12      0x288
+	#define HW_VERSION_UNKNOW                0x00
+	#define HW_VERSION_VIM1_V12              0x12
+	#define HW_VERSION_VIM1_V14              0x14
+	#define HW_VERSION_VIM2_V12              0x22
+	#define HW_VERSION_VIM2_V14              0x24
+	#define HW_VERSION_VIM3_V11              0x31
+	#define HW_VERSION_VIM3_V12              0x32
+#endif
 
 static char* LED_MODE_STR[] = { "off", "on", "breathe", "heartbeat"};
 
@@ -206,119 +228,6 @@ static void  kbi_i2c_read_block(uint start_reg, int count, char val[])
 	} while (nbytes > 0);
 }
 
-/*
-
-static unsigned char chartonum(char c)
-{
-	if (c >= '0' && c <= '9')
-		return c - '0';
-	if (c >= 'A' && c <= 'F')
-		return (c - 'A') + 10;
-	if (c >= 'a' && c <= 'f')
-		return (c - 'a') + 10;
-	return 0;
-}
-*/
-static int get_forcereset_wol(bool is_print)
-{
-	int enable;
-	enable = kbi_i2c_read(REG_BOOT_EN_WOL);
-	if (is_print)
-	printf("wol forcereset: %s\n", enable&0x02 ? "enable":"disable");
-	env_set("wol_forcereset", enable&0x02 ? "1" : "0");
-	return enable;
-
-}
-
-static int get_wol(bool is_print)
-{
-	int enable;
-	enable = kbi_i2c_read(REG_BOOT_EN_WOL);
-	if (is_print)
-	printf("boot wol: %s\n", enable&0x01 ? "enable":"disable");
-	env_set("wol_enable", enable&0x01 ?"1" : "0");
-	return enable;
-}
-
-static void set_wol(bool is_shutdown, int enable)
-{
-	char cmd[64];
-//	int mode;
-
-	if ((enable&0x01) != 0) {
-
-//	int mac_addr[MAC_LENGHT] = {0};
-//	if (is_shutdown)
-//		run_command("phyreg w 0 0", 0);
-//	else
-//		run_command("phyreg w 0 0x1040", 0);
-//
-//	run_command("phyreg w 31 0xd40", 0);
-//	run_command("phyreg w 22 0x20", 0);
-//	run_command("phyreg w 31 0", 0);
-
-//	mode = kbi_i2c_read(REG_MAC_SWITCH);
-//	if (mode == 1) {
-//		kbi_i2c_read_block(REG_MAC, MAC_LENGHT, mac_addr);
-//	} else {
-//		run_command("efuse mac", 0);
-//		char *s = getenv("eth_mac");
-//		if ((s != NULL) && (strcmp(s, "00:00:00:00:00:00") != 0)) {
-//			printf("getmac = %s\n", s);
-//			int i = 0;
-//			for (i = 0; i < 6 && s[0] != '\0' && s[1] != '\0'; i++) {
-//			mac_addr[i] = chartonum(s[0]) << 4 | chartonum(s[1]);
-//			s +=3;
-//			}
-//		} else {
-//			kbi_i2c_read_block(REG_MAC, MAC_LENGHT, mac_addr);
-//		}
-//	}
-//	run_command("phyreg w 31 0xd8c", 0);
-//	sprintf(cmd, "phyreg w 16 0x%x%x", mac_addr[1], mac_addr[0]);
-//	run_command(cmd, 0);
-//	sprintf(cmd, "phyreg w 17 0x%x%x", mac_addr[3], mac_addr[2]);
-//	run_command(cmd, 0);
-//	sprintf(cmd, "phyreg w 18 0x%x%x", mac_addr[5], mac_addr[4]);
-//	run_command(cmd, 0);
-//	run_command("phyreg w 31 0", 0);
-//
-//	run_command("phyreg w 31 0xd8a", 0);
-//	run_command("phyreg w 17 0x9fff", 0);
-//	run_command("phyreg w 31 0", 0);
-//
-//	run_command("phyreg w 31 0xd8a", 0);
-//	run_command("phyreg w 16 0x1000", 0);
-//	run_command("phyreg w 31 0", 0);
-//
-//	run_command("phyreg w 31 0xd80", 0);
-//	run_command("phyreg w 16 0x3000", 0);
-//	run_command("phyreg w 17 0x0020", 0);
-//	run_command("phyreg w 18 0x03c0", 0);
-//	run_command("phyreg w 19 0x0000", 0);
-//	run_command("phyreg w 20 0x0000", 0);
-//	run_command("phyreg w 21 0x0000", 0);
-//	run_command("phyreg w 22 0x0000", 0);
-//	run_command("phyreg w 23 0x0000", 0);
-//	run_command("phyreg w 31 0", 0);
-//
-//	run_command("phyreg w 31 0xd8a", 0);
-//	run_command("phyreg w 19 0x1002", 0);
-//	run_command("phyreg w 31 0", 0);
-//
-// } else {
-//	run_command("phyreg w 31 0xd8a", 0);
-//	run_command("phyreg w 16 0", 0);
-//	run_command("phyreg w 17 0x7fff", 0);
-//	run_command("phyreg w 31 0", 0);
-  }
-
-	run_command("i2c dev 8", 0);
-	sprintf(cmd, "i2c mw %x %x %d 1", CHIP_ADDR, REG_BOOT_EN_WOL, enable);
-	run_command(cmd, 0);
-//	printf("%s: %d\n", __func__, enable);
-}
-
 static void get_version(void)
 {
 	char version[VERSION_LENGHT] = {};
@@ -370,6 +279,7 @@ static void get_mac(void)
 	env_set("eth_mac", mac);
 }
 
+#if defined (CONFIG_ARCH_ROCKCHIP)
 static const char *board_type_to_string(char board_type)
 {
 	switch (board_type) {
@@ -383,7 +293,29 @@ static const char *board_type_to_string(char board_type)
 			return "UnknowBorad";
 	}
 }
+#else
+static const char *hw_version_str(int hw_ver)
+{
+	switch (hw_ver) {
+		case HW_VERSION_VIM1_V12:
+			return "VIM1.V12";
+		case HW_VERSION_VIM1_V14:
+			return "VIM1.V14";
+		case HW_VERSION_VIM2_V12:
+			return "VIM2.V12";
+		case HW_VERSION_VIM2_V14:
+			return "VIM2.V14";
+		case HW_VERSION_VIM3_V11:
+			return "VIM3.V11";
+		case HW_VERSION_VIM3_V12:
+			return "VIM3.V12";
+		default:
+			return "Unknow";
+	}
+}
+#endif
 
+#if defined (CONFIG_ARCH_ROCKCHIP)
 static char detect_board(void)
 {
 	int ret;
@@ -417,6 +349,63 @@ static char detect_board(void)
 
 	return board_type;
 }
+#else
+static int get_hw_version(void)
+{
+	int val = 0;
+	int ret = 0;
+	int hw_ver = 0;
+
+#if defined (CONFIG_MESON_GXM)
+	ret = adc_channel_single_shot("adc@8680", 1, &val);
+	if (ret) {
+		printf("%s adc_channel_single_shot fail! ret=%d\n", __func__, ret);
+		return -1;
+	}
+
+	debug("%s SARADC: %d\n", __func__, val);
+
+	if ((val >= HW_VERSION_ADC_VAL_VIM2_V12 - HW_VERSION_ADC_VALUE_TOLERANCE) && (val <= HW_VERSION_ADC_VAL_VIM2_V12 + HW_VERSION_ADC_VALUE_TOLERANCE)) {
+		hw_ver = HW_VERSION_VIM2_V12;
+	} else if ((val >= HW_VERSION_ADC_VAL_VIM2_V14 - HW_VERSION_ADC_VALUE_TOLERANCE) && (val <= HW_VERSION_ADC_VAL_VIM2_V14 + HW_VERSION_ADC_VALUE_TOLERANCE)) {
+		hw_ver = HW_VERSION_VIM2_V14;
+	} else {
+		hw_ver = HW_VERSION_UNKNOW; 
+	}
+#elif defined (CONFIG_MESON_GXL)
+	ret = adc_channel_single_shot("adc@8680", 1, &val);
+	if (ret) {
+		printf("%s adc_channel_single_shot fail! ret=%d\n", __func__, ret);
+		return -1;
+	}
+
+	debug("%s SARADC: %d\n", __func__, val);
+
+	if ((val >= HW_VERSION_ADC_VAL_VIM1_V14 - HW_VERSION_ADC_VALUE_TOLERANCE) && (val <= HW_VERSION_ADC_VAL_VIM1_V14 + HW_VERSION_ADC_VALUE_TOLERANCE)) {
+		hw_ver = HW_VERSION_VIM1_V14;
+	} else if ((val >= HW_VERSION_ADC_VAL_VIM1_V12 - HW_VERSION_ADC_VALUE_TOLERANCE) && (val <= HW_VERSION_ADC_VAL_VIM1_V12 + HW_VERSION_ADC_VALUE_TOLERANCE)) {
+		hw_ver = HW_VERSION_VIM1_V12;
+	} else {
+		hw_ver = HW_VERSION_UNKNOW;
+	}
+#elif defined (CONFIG_MESON_G12A)
+//	if ((val >= HW_VERSION_ADC_VAL_VIM3_V11 - HW_VERSION_ADC_VALUE_TOLERANCE) && (val <= HW_VERSION_ADC_VAL_VIM3_V11 + HW_VERSION_ADC_VALUE_TOLERANCE)) {
+//		hw_ver = HW_VERSION_VIM3_V11;
+//	} else if ((val >= HW_VERSION_ADC_VAL_VIM3_V12 - HW_VERSION_ADC_VALUE_TOLERANCE) && (val <= HW_VERSION_ADC_VAL_VIM3_V12 + HW_VERSION_ADC_VALUE_TOLERANCE)) {
+//		hw_ver = HW_VERSION_VIM3_V12;
+//	} else {
+//		hw_ver = HW_VERSION_UNKNOW;
+//	}
+	// force set to V12
+	hw_ver = HW_VERSION_VIM3_V12;
+#endif
+	printf("saradc: 0x%x, hw_ver: 0x%x (%s)\n", val, hw_ver, hw_version_str(hw_ver));
+
+	env_set("hwver", hw_version_str(hw_ver));
+
+	return 0;
+}
+#endif
 
 static void get_usid(void)
 {
@@ -583,6 +572,29 @@ static void set_ir(int enable)
 	run_command(cmd, 0);
 }
 
+#if defined(CONFIG_MESON_G12A)
+static void get_port_mode(void)
+{
+	int mode;
+	mode = kbi_i2c_read(REG_PORT_MODE);
+	printf("port mode is %s\n", mode==0 ? "usb3.0" : "pcie");
+	env_set("port_mode", mode==0 ? "0" : "1");
+}
+
+static void set_port_mode(int mode)
+{
+	char cmd[64];
+	if ((mode < 0) && (mode > 1)) {
+		printf("the mode is invalid, you can set 0 and 1");
+		return;
+	}
+	sprintf(cmd, "i2c mw %x %x %d 1",CHIP_ADDR, REG_PORT_MODE, mode);
+	printf("set port mode to :%s\n", mode==0 ? "usb3.0" : "pcie");
+	run_command(cmd, 0);
+	env_set("port_mode", mode==0 ? "0" : "1");
+}
+#endif
+
 static void get_switch_mac(void)
 {
 	int mode;
@@ -640,9 +652,7 @@ static void set_gpio(int enable)
 
 static void get_boot_enable(int type)
 {
-	if (type == BOOT_EN_WOL)
-		get_wol(true);
-	else if (type == BOOT_EN_RTC)
+	if (type == BOOT_EN_RTC)
 		get_rtc();
 	else if (type == BOOT_EN_IR)
 		get_ir();
@@ -657,12 +667,7 @@ static void get_boot_enable(int type)
 static void set_boot_enable(int type, int enable)
 {
 	int state = 0;
-	if (type == BOOT_EN_WOL)
-	{
-		state = get_wol(false);
-		set_wol(false, enable|(state&0x02));
-	}
-	else if (type == BOOT_EN_RTC)
+	if (type == BOOT_EN_RTC)
 		set_rtc(enable);
 	else if (type == BOOT_EN_IR)
 		set_ir(enable);
@@ -676,35 +681,6 @@ static void set_boot_enable(int type, int enable)
 	}
 }
 
-static void get_forcereset_enable(int type)
-{
-	if (type == FORCERESET_GPIO)
-		get_forcereset_gpio(true);
-	else if (type == FORCERESET_WOL)
-		get_forcereset_wol(true);
-	else
-		printf("get forcereset err=%d\n", type);
-}
-
-static int set_forcereset_enable(int type, int enable)
-{
-	int state = 0;
-	if (type == FORCERESET_GPIO)
-	{
-		state = get_forcereset_gpio(false);
-		set_gpio((state&0x01)|(enable<<1));
-	}
-	else if (type == FORCERESET_WOL)
-	{
-		state = get_forcereset_wol(false);
-		set_wol(false, (state&0x01)|(enable<<1));
-	} else {
-		printf("set forcereset err=%d\n", type);
-		return CMD_RET_USAGE;
-	}
-	return 0;
-}
-
 static void get_blue_led_mode(int type)
 {
 	int mode;
@@ -741,9 +717,8 @@ static int set_blue_led_mode(int type, int mode)
 
 static int do_kbi_init(cmd_tbl_t * cmdtp, int flag, int argc, char * const argv[])
 {
-	int enable = get_wol(false);
-	if ((enable&0x01) != 0)
-		set_wol(false, enable);
+	run_command("i2c dev 0", 0);
+
 	return 0;
 }
 
@@ -794,12 +769,18 @@ static int do_kbi_ethmac(cmd_tbl_t * cmdtp, int flag, int argc, char * const arg
 	return 0;
 }
 
-
+#if defined (CONFIG_ARCH_ROCKCHIP)
 static int do_kbi_boarddetect(cmd_tbl_t * cmdtp, int flag, int argc, char * const argv[])
 {
 	detect_board();
 	return 0;
 }
+#else
+static int do_kbi_hwver(cmd_tbl_t * cmdtp, int flag, int argc, char * const argv[])
+{
+	return get_hw_version();
+}
+#endif
 
 static int do_kbi_switchmac(cmd_tbl_t * cmdtp, int flag, int argc, char * const argv[])
 {
@@ -826,6 +807,33 @@ static int do_kbi_switchmac(cmd_tbl_t * cmdtp, int flag, int argc, char * const
 	return 0;
 }
 
+#if defined (CONFIG_MESON_G12A)
+static int do_kbi_portmode(cmd_tbl_t * cmdtp, int flag, int argc, char * const argv[])
+{
+
+	if (argc < 2)
+		return CMD_RET_USAGE;
+
+	if (strcmp(argv[1], "w") == 0) {
+		if (argc < 3)
+			return CMD_RET_USAGE;
+
+		if (strcmp(argv[2], "0") == 0) {
+			set_port_mode(0);
+		} else if (strcmp(argv[2], "1") == 0) {
+			set_port_mode(1);
+		} else {
+			return CMD_RET_USAGE;
+		}
+	} else if (strcmp(argv[1], "r") == 0) {
+		get_port_mode();
+	} else {
+		return CMD_RET_USAGE;
+	}
+	return 0;
+}
+#endif
+
 static int do_kbi_led(cmd_tbl_t * cmdtp, int flag, int argc, char * const argv[])
 {
 	int ret = 0;
@@ -876,54 +884,9 @@ static int do_kbi_led(cmd_tbl_t * cmdtp, int flag, int argc, char * const argv[]
 	return ret;
 }
 
-static int do_kbi_forcereset(cmd_tbl_t * cmdtp, int flag, int argc, char * const argv[])
-{
-	int ret = 0;
-	if (argc < 3)
-		return CMD_RET_USAGE;
-
-	if (strcmp(argv[1], "wol") ==0) {
-		if (strcmp(argv[2], "r") == 0) {
-			get_forcereset_enable(FORCERESET_WOL);
-		} else if (strcmp(argv[2], "w") == 0) {
-			if (argc < 4)
-				return CMD_RET_USAGE;
-			if (strcmp(argv[3], "1") == 0) {
-				ret = set_forcereset_enable(FORCERESET_WOL, 1);
-			} else if (strcmp(argv[3], "0") == 0) {
-				ret = set_forcereset_enable(FORCERESET_WOL, 0);
-			} else {
-				ret =  CMD_RET_USAGE;
-			}
-		}
-	} else if (strcmp(argv[1], "gpio") ==0) {
-
-		if (strcmp(argv[2], "r") == 0) {
-			get_forcereset_enable(FORCERESET_GPIO);
-		} else if (strcmp(argv[2], "w") == 0) {
-			if (argc <4)
-				return CMD_RET_USAGE;
-			if (strcmp(argv[3], "1") == 0) {
-				ret = set_forcereset_enable(FORCERESET_GPIO, 1);
-			} else if (strcmp(argv[3], "0") == 0) {
-				ret = set_forcereset_enable(FORCERESET_GPIO, 0);
-			} else {
-				ret =  CMD_RET_USAGE;
-			}
-		}
-
-	} else {
-		return CMD_RET_USAGE;
-	}
-	return ret;
-}
-
 static int do_kbi_poweroff(cmd_tbl_t * cmdtp, int flag, int argc, char * const argv[])
 {
 	printf("System poweroff\n");
-	int enable = get_wol(false);
-	if ((enable&0x03) != 0)
-		set_wol(true, enable);
 	set_poweroff();
 	return 0;
 }
@@ -935,9 +898,7 @@ static int do_kbi_trigger(cmd_tbl_t * cmdtp, int flag, int argc, char * const ar
 
 	if (strcmp(argv[2], "r") == 0) {
 
-		if (strcmp(argv[1], "wol") == 0)
-			get_boot_enable(BOOT_EN_WOL);
-		else if (strcmp(argv[1], "rtc") == 0)
+		if (strcmp(argv[1], "rtc") == 0)
 			get_boot_enable(BOOT_EN_RTC);
 		else if (strcmp(argv[1], "ir") == 0)
 			get_boot_enable(BOOT_EN_IR);
@@ -955,14 +916,7 @@ static int do_kbi_trigger(cmd_tbl_t * cmdtp, int flag, int argc, char * const ar
 		if ((strcmp(argv[3], "1") != 0) && (strcmp(argv[3], "0") != 0))
 			return CMD_RET_USAGE;
 
-		if (strcmp(argv[1], "wol") == 0) {
-
-			if (strcmp(argv[3], "1") == 0)
-				set_boot_enable(BOOT_EN_WOL, 1);
-			else
-				set_boot_enable(BOOT_EN_WOL, 0);
-
-	    } else if (strcmp(argv[1], "rtc") == 0) {
+	    if (strcmp(argv[1], "rtc") == 0) {
 
 			if (strcmp(argv[3], "1") == 0)
 				set_boot_enable(BOOT_EN_RTC, 1);
@@ -1042,19 +996,50 @@ static cmd_tbl_t cmd_kbi_sub[] = {
 	U_BOOT_CMD_MKENT(adc, 1, 1, do_kbi_adc, "", ""),
 	U_BOOT_CMD_MKENT(powerstate, 1, 1, do_kbi_powerstate, "", ""),
 	U_BOOT_CMD_MKENT(ethmac, 1, 1, do_kbi_ethmac, "", ""),
+#if defined (CONFIG_ARCH_ROCKCHIP)
 	U_BOOT_CMD_MKENT(boarddetect, 1, 1, do_kbi_boarddetect, "", ""),
+#else
+	U_BOOT_CMD_MKENT(hwver, 1, 1, do_kbi_hwver, "", ""),
+#endif
 	U_BOOT_CMD_MKENT(poweroff, 1, 1, do_kbi_poweroff, "", ""),
 	U_BOOT_CMD_MKENT(switchmac, 3, 1, do_kbi_switchmac, "", ""),
 	U_BOOT_CMD_MKENT(led, 4, 1, do_kbi_led, "", ""),
 	U_BOOT_CMD_MKENT(trigger, 4, 1, do_kbi_trigger, "", ""),
 	U_BOOT_CMD_MKENT(bootmode, 3, 1, do_kbi_bootmode, "", ""),
-	U_BOOT_CMD_MKENT(forcereset, 4, 1, do_kbi_forcereset, "", ""),
+#if defined(CONFIG_MESON_G12A)
+	U_BOOT_CMD_MKENT(portmode, 1, 1, do_kbi_portmode, "", ""),
+#endif
 };
 
 static int do_kbi(cmd_tbl_t * cmdtp, int flag, int argc, char * const argv[])
 {
 	cmd_tbl_t *c;
 
+#if defined (CONFIG_MESON_GXL)
+	int hw_ver = 0;
+	int val = 0;
+	int ret = 0;
+
+	ret = adc_channel_single_shot("adc@8680", 1, &val);
+	if (ret) {
+    	printf("%s adc_channel_single_shot fail! ret=%d\n", __func__, ret);
+    	return -1;
+	}
+
+	if ((val >= HW_VERSION_ADC_VAL_VIM1_V14 - HW_VERSION_ADC_VALUE_TOLERANCE) && (val <= HW_VERSION_ADC_VAL_VIM1_V14 + HW_VERSION_ADC_VALUE_TOLERANCE)) {
+		hw_ver = HW_VERSION_VIM1_V14;
+	} else if ((val >= HW_VERSION_ADC_VAL_VIM1_V12 - HW_VERSION_ADC_VALUE_TOLERANCE) && (val <= HW_VERSION_ADC_VAL_VIM1_V12 + HW_VERSION_ADC_VALUE_TOLERANCE)) {
+		hw_ver = HW_VERSION_VIM1_V12;
+	} else {
+		hw_ver = HW_VERSION_UNKNOW;
+	}
+	if ((hw_ver == HW_VERSION_UNKNOW) || (hw_ver == HW_VERSION_VIM1_V12)) {
+		printf("The Board don't support KBI interface\n");
+		env_set("hwver", hw_version_str(hw_ver));
+		return CMD_RET_FAILURE;
+	}
+#endif
+
 	if (argc < 2)
 		return CMD_RET_USAGE;
 
@@ -1079,20 +1064,25 @@ static char kbi_help_text[] =
 		"kbi powerstate - read power on state\n"
 		"kbi poweroff - power off device\n"
 		"kbi ethmac - read ethernet mac address\n"
+#if defined (CONFIG_ARCH_ROCKCHIP)
 		"kbi boarddetect - detect board type\n"
+#else
+		"kbi hwver - read board hardware version\n"
+#endif
 		"\n"
 		"kbi led [systemoff|systemon] w <off|on|breathe|heartbeat> - set blue led mode\n"
 		"kbi led [systemoff|systemon] r - read blue led mode\n"
 		"\n"
-		"kbi forcereset [wol|gpio] w <0|1> - disable/enable force-reset\n"
-		"kbi forcereset [wol|gpio] r - read state of force-reset\n"
-		"[notice: the wol|gpio boot trigger must be enabled if you want to enable force-reset]\n"
-		"\n"
 		"kbi bootmode w <emmc|spi> - set bootmode to emmc or spi\n"
 		"kbi bootmode r - read current bootmode\n"
 		"\n"
-		"kbi trigger [wol|rtc|ir|dcin|key|gpio] w <0|1> - disable/enable boot trigger\n"
-		"kbi trigger [wol|rtc|ir|dcin|key|gpio] r - read mode of a boot trigger";
+#if defined(CONFIG_MESON_G12A)
+		"kbi portmode w <0|1> - set port as usb3.0 or pcie\n"
+		"kbi portmode r - read current port mode\n"
+		"\n"
+#endif
+		"kbi trigger [rtc|ir|dcin|key|gpio] w <0|1> - disable/enable boot trigger\n"
+		"kbi trigger [rtc|ir|dcin|key|gpio] r - read mode of a boot trigger";
 
 
 U_BOOT_CMD(
-- 
2.7.4

