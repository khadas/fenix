From 0ea194052a992627ed3b3e8fd6f02b128830b96b Mon Sep 17 00:00:00 2001
From: hyphop <art@khadas.com>
Date: Wed, 11 Mar 2020 21:20:02 +0900
Subject: [PATCH] env_fat_auto_detect_source

parse bootsource var for detect boot source for read env from booted fat partition

---
 env/fat.c | 57 +++++++++++++++++++++++++++++++++++++++++++++----------
 1 file changed, 47 insertions(+), 10 deletions(-)

diff --git a/env/fat.c b/env/fat.c
index d2a0864b..245e01ae 100644
--- a/env/fat.c
+++ b/env/fat.c
@@ -29,15 +29,41 @@
 # if defined(CONFIG_CMD_SAVEENV)
 #  define CMD_SAVEENV
 # endif
+#endif
+
+	struct blk_desc *dev_desc = NULL;
+	disk_partition_t info;
+	int dev, part;
+
+#define CONFIG_ENV_FAT_AUTO_SOURCE 1
+#define CONFIG_ENV_FAT_DEVICE_AND_PART_SD  "1:1"
+#define CONFIG_ENV_FAT_DEVICE_AND_PART_MMC "2:1"
+
+#ifdef CONFIG_ENV_FAT_AUTO_SOURCE
+//auto detect env storage source by boot source
+static int detect_source(void)
+{
+	if ( strstr(env_get("boot_source"),"sd") ) {
+		printf("booted from sd...");
+		return blk_get_device_part_str(CONFIG_ENV_FAT_INTERFACE,
+					CONFIG_ENV_FAT_DEVICE_AND_PART_SD,
+					&dev_desc, &info, 1);
+	}
+	if ( strstr(env_get("boot_source"),"emmc") ) {
+		printf("booted from emmc...");
+		return blk_get_device_part_str(CONFIG_ENV_FAT_INTERFACE,
+					CONFIG_ENV_FAT_DEVICE_AND_PART_MMC,
+					&dev_desc, &info, 1);
+	}
+	return -1;
+}
+
 #endif
 
 #ifdef CMD_SAVEENV
 static int env_fat_save(void)
 {
 	env_t __aligned(ARCH_DMA_MINALIGN) env_new;
-	struct blk_desc *dev_desc = NULL;
-	disk_partition_t info;
-	int dev, part;
 	int err;
 	loff_t size;
 
@@ -48,6 +74,11 @@ static int env_fat_save(void)
 	part = blk_get_device_part_str(CONFIG_ENV_FAT_INTERFACE,
 					CONFIG_ENV_FAT_DEVICE_AND_PART,
 					&dev_desc, &info, 1);
+
+#ifdef CONFIG_ENV_FAT_AUTO_SOURCE
+	part = detect_source();
+#endif
+
 	if (part < 0)
 		return 1;
 
@@ -57,7 +88,7 @@ static int env_fat_save(void)
 		 * This printf is embedded in the messages from env_save that
 		 * will calling it. The missing \n is intentional.
 		 */
-		printf("Unable to use %s %d:%d... ",
+		printf("Unable to use %s-%d:%d... ",
 		       CONFIG_ENV_FAT_INTERFACE, dev, part);
 		return 1;
 	}
@@ -69,7 +100,7 @@ static int env_fat_save(void)
 		 * This printf is embedded in the messages from env_save that
 		 * will calling it. The missing \n is intentional.
 		 */
-		printf("Unable to write \"%s\" from %s%d:%d... ",
+		printf("Unable to write \"%s\" from %s-%d:%d... ",
 			CONFIG_ENV_FAT_FILE, CONFIG_ENV_FAT_INTERFACE, dev, part);
 		return 1;
 	}
@@ -82,9 +113,9 @@ static int env_fat_save(void)
 static int env_fat_load(void)
 {
 	ALLOC_CACHE_ALIGN_BUFFER(char, buf, CONFIG_ENV_SIZE);
-	struct blk_desc *dev_desc = NULL;
-	disk_partition_t info;
-	int dev, part;
+//	struct blk_desc *dev_desc = NULL;
+//	disk_partition_t info;
+//	int dev, part;
 	int err;
 
 #ifdef CONFIG_MMC
@@ -95,16 +126,22 @@ static int env_fat_load(void)
 	part = blk_get_device_part_str(CONFIG_ENV_FAT_INTERFACE,
 					CONFIG_ENV_FAT_DEVICE_AND_PART,
 					&dev_desc, &info, 1);
+
+#ifdef CONFIG_ENV_FAT_AUTO_SOURCE
+	part = detect_source();
+#endif
+
 	if (part < 0)
 		goto err_env_relocate;
 
 	dev = dev_desc->devnum;
+
 	if (fat_set_blk_dev(dev_desc, &info) != 0) {
 		/*
 		 * This printf is embedded in the messages from env_save that
 		 * will calling it. The missing \n is intentional.
 		 */
-		printf("Unable to use %s %d:%d... ",
+		printf("Unable to use %s-%d:%d... ",
 		       CONFIG_ENV_FAT_INTERFACE, dev, part);
 		goto err_env_relocate;
 	}
@@ -130,7 +167,7 @@ static int env_fat_load(void)
 		 * This printf is embedded in the messages from env_save that
 		 * will calling it. The missing \n is intentional.
 		 */
-		printf("Unable to read \"%s\" from %s%d:%d... ",
+		printf("Unable to read \"%s\" from %s-%d:%d... ",
 			CONFIG_ENV_FAT_FILE, CONFIG_ENV_FAT_INTERFACE, dev, part);
 		goto err_env_relocate;
 	}
-- 
2.17.1

