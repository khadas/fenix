From 655451c369eee2d94d77bada35911b3380dcaa09 Mon Sep 17 00:00:00 2001
From: Maxime Jourdan <mjourdan@baylibre.com>
Date: Wed, 23 Jan 2019 07:28:55 +0100
Subject: [PATCH 43/92] media: meson: vp9: multiple fixes for lockups

Some reference frames in VP9 can be held for a very long time, but
unfortunately they're also display frames.

This forces us to DONE those frames early and keep track of their use.
---
 drivers/media/platform/meson/vdec/codec_vp9.c | 57 ++++++++++++++++++---------
 drivers/media/platform/meson/vdec/esparser.c  |  4 +-
 2 files changed, 41 insertions(+), 20 deletions(-)

diff --git a/drivers/media/platform/meson/vdec/codec_vp9.c b/drivers/media/platform/meson/vdec/codec_vp9.c
index 9f3be63..e1c5df1 100644
--- a/drivers/media/platform/meson/vdec/codec_vp9.c
+++ b/drivers/media/platform/meson/vdec/codec_vp9.c
@@ -208,9 +208,11 @@ struct loopfilter {
 struct vp9_frame {
 	struct list_head list;
 	struct vb2_v4l2_buffer *vbuf;
+	int index;
 	int intra_only;
 	int show;
 	int type;
+	int done;
 };
 
 struct codec_vp9 {
@@ -408,14 +410,16 @@ static void codec_vp9_flush_output(struct amvdec_session *sess)
 	struct vp9_frame *tmp, *n;
 
 	list_for_each_entry_safe(tmp, n, &vp9->ref_frames_list, list) {
-		if (tmp->show)
-			amvdec_dst_buf_done(sess, tmp->vbuf, V4L2_FIELD_NONE);
-		else
-			v4l2_m2m_buf_queue(sess->m2m_ctx, tmp->vbuf);
+		if (!tmp->done) {
+			if (tmp->show)
+				amvdec_dst_buf_done(sess, tmp->vbuf, V4L2_FIELD_NONE);
+			else
+				v4l2_m2m_buf_queue(sess->m2m_ctx, tmp->vbuf);
+			vp9->frames_num--;
+		}
 
 		list_del(&tmp->list);
 		kfree(tmp);
-		vp9->frames_num--;
 	}
 }
 
@@ -616,7 +620,7 @@ static dma_addr_t codec_vp9_get_frame_mv_paddr(struct codec_vp9 *vp9,
 					       struct vp9_frame *frame)
 {
 	return vp9->workspace_paddr + MPRED_MV_OFFSET +
-	       (frame->vbuf->vb2_buf.index * MPRED_MV_BUF_SIZE);
+	       (frame->index * MPRED_MV_BUF_SIZE);
 }
 
 static void codec_vp9_set_mpred_mv(struct amvdec_core *core,
@@ -653,7 +657,7 @@ static void codec_vp9_set_mpred_mv(struct amvdec_core *core,
 static void codec_vp9_update_next_ref(struct codec_vp9 *vp9)
 {
 	union rpm_param *param = &vp9->rpm_param;
-	u32 buf_idx = vp9->cur_frame->vbuf->vb2_buf.index;
+	u32 buf_idx = vp9->cur_frame->index;
 	int ref_index = 0;
 	int refresh_frame_flags;
 	int mask;
@@ -715,7 +719,7 @@ static struct vp9_frame * codec_vp9_get_frame_by_idx(struct codec_vp9 *vp9, int
 	struct vp9_frame *frame;
 
 	list_for_each_entry(frame, &vp9->ref_frames_list, list) {
-		if (frame->vbuf->vb2_buf.index == idx)
+		if (frame->index == idx)
 			return frame;
 	}
 
@@ -751,10 +755,10 @@ static void codec_vp9_set_refs(struct amvdec_session *sess,
 			continue;
 
 		if (codec_hevc_use_fbc(sess->pixfmt_cap, vp9->is_10bit)) {
-			id_y = frame->vbuf->vb2_buf.index;
+			id_y = frame->index;
 			id_u_v = id_y;
 		} else {
-			id_y = frame->vbuf->vb2_buf.index * 2;
+			id_y = frame->index * 2;
 			id_u_v = id_y + 1;
 		}
 
@@ -810,7 +814,19 @@ static struct vp9_frame *codec_vp9_get_new_frame(struct amvdec_session *sess)
 		return NULL;
 	}
 
+	while (codec_vp9_get_frame_by_idx(vp9, vbuf->vb2_buf.index)) {
+		struct vb2_v4l2_buffer *old_vbuf = vbuf;
+		vbuf = v4l2_m2m_dst_buf_remove(sess->m2m_ctx);
+		v4l2_m2m_buf_queue(sess->m2m_ctx, old_vbuf);
+		if (!vbuf) {
+			dev_err(sess->core->dev, "No dst buffer available\n");
+			kfree(new_frame);
+			return NULL;
+		}
+	}
+
 	new_frame->vbuf = vbuf;
+	new_frame->index = vbuf->vb2_buf.index;
 	new_frame->intra_only = param->p.intra_only;
 	new_frame->show = param->p.show_frame;
 	new_frame->type = param->p.frame_type;
@@ -839,7 +855,7 @@ static void codec_vp9_rm_noshow_frame(struct amvdec_session *sess)
 		if (tmp->show)
 			continue;
 
-		printk("rm noshow: %u\n", tmp->vbuf->vb2_buf.index);
+		printk("rm noshow: %u\n", tmp->index);
 		v4l2_m2m_buf_queue(sess->m2m_ctx, tmp->vbuf);
 		list_del(&tmp->list);
 		kfree(tmp);
@@ -981,10 +997,8 @@ static bool codec_vp9_is_ref(struct codec_vp9 *vp9, struct vp9_frame *frame)
 	int i;
 
 	for (i = 0; i < REFS_PER_FRAME; ++i)
-		if (vp9->frame_refs[i] == frame) {
-			printk("buf %u is ref %u\n", frame->vbuf->vb2_buf.index, i);
+		if (vp9->frame_refs[i] == frame)
 			return true;
-		}
 
 	return false;
 }
@@ -995,17 +1009,22 @@ static void codec_vp9_show_frame(struct amvdec_session *sess)
 	struct vp9_frame *tmp, *n;
 
 	list_for_each_entry_safe(tmp, n, &vp9->ref_frames_list, list) {
-		if (!tmp->show)
+		if (!tmp->show || tmp == vp9->cur_frame)
 			continue;
 
+		if (!tmp->done) {
+			printk("Doning %u\n", tmp->index);
+			amvdec_dst_buf_done(sess, tmp->vbuf, V4L2_FIELD_NONE);
+			tmp->done = 1;
+			vp9->frames_num--;
+		}
+
 		if (codec_vp9_is_ref(vp9, tmp))
-			break;
+			continue;
 
-		printk("Doning %u\n", tmp->vbuf->vb2_buf.index);
-		amvdec_dst_buf_done(sess, tmp->vbuf, V4L2_FIELD_NONE);
+		printk("deleting %d\n", tmp->index);
 		list_del(&tmp->list);
 		kfree(tmp);
-		vp9->frames_num--;
 	}
 }
 
diff --git a/drivers/media/platform/meson/vdec/esparser.c b/drivers/media/platform/meson/vdec/esparser.c
index f46c4a0..43bbda0 100644
--- a/drivers/media/platform/meson/vdec/esparser.c
+++ b/drivers/media/platform/meson/vdec/esparser.c
@@ -279,7 +279,9 @@ esparser_queue(struct amvdec_session *sess, struct vb2_v4l2_buffer *vbuf)
 	if (codec_ops->num_pending_bufs)
 		num_dst_bufs = codec_ops->num_pending_bufs(sess);
 
-	num_dst_bufs += v4l2_m2m_num_dst_bufs_ready(sess->m2m_ctx) - 1;
+	num_dst_bufs += v4l2_m2m_num_dst_bufs_ready(sess->m2m_ctx);
+	if (sess->fmt_out->pixfmt == V4L2_PIX_FMT_VP9)
+		num_dst_bufs -= 2;
 
 	if (esparser_vififo_get_free_space(sess) < payload_size ||
 	    atomic_read(&sess->esparser_queued_bufs) >= num_dst_bufs)
-- 
2.7.4

