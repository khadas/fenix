From 7d82bd54cabb53ab060913ac2ee8da492438097e Mon Sep 17 00:00:00 2001
From: Maxime Jourdan <mjourdan@baylibre.com>
Date: Mon, 4 Feb 2019 10:31:25 +0100
Subject: [PATCH 44/92] vp9: cosmetics

---
 drivers/media/platform/meson/vdec/codec_vp9.c | 91 +++++++++++++--------------
 1 file changed, 43 insertions(+), 48 deletions(-)

diff --git a/drivers/media/platform/meson/vdec/codec_vp9.c b/drivers/media/platform/meson/vdec/codec_vp9.c
index e1c5df1..731119b 100644
--- a/drivers/media/platform/meson/vdec/codec_vp9.c
+++ b/drivers/media/platform/meson/vdec/codec_vp9.c
@@ -39,6 +39,7 @@
 #define HEVC_DECODE_SIZE	HEVC_ASSIST_SCRATCH_N
 
 /* VP9 Constants */
+#define LCU_SIZE		64
 #define MAX_REF_PIC_NUM		24
 #define REFS_PER_FRAME		3
 #define REF_FRAMES		8
@@ -364,29 +365,29 @@ vp9_loop_filter_frame_init(struct amvdec_core *core, struct segmentation *seg,
 			lvl_seg = vp9_clamp(seg->abs_delta == SEGMENT_ABSDATA ?
 				data : default_filt_lvl + data,
 				0, MAX_LOOP_FILTER);
-	}
+		}
 
-	if (!lf->mode_ref_delta_enabled) {
-		/*we could get rid of this if we assume that deltas are set to
-		zero when not in use; encoder always uses deltas*/
-		memset(lfi->lvl[seg_id], lvl_seg, sizeof(lfi->lvl[seg_id]));
-	} else {
-		int ref, mode;
-		const int intra_lvl = lvl_seg +	lf->ref_deltas[INTRA_FRAME]
-					* scale;
-		lfi->lvl[seg_id][INTRA_FRAME][0] =
-				vp9_clamp(intra_lvl, 0, MAX_LOOP_FILTER);
-
-		for (ref = LAST_FRAME; ref < MAX_REF_FRAMES; ++ref) {
-			/* LAST_FRAME = 1, MAX_REF_FRAMES = 4*/
-			for (mode = 0; mode < MAX_MODE_LF_DELTAS; ++mode) {
-				/*MAX_MODE_LF_DELTAS = 2*/
-				const int inter_lvl =
-					lvl_seg + lf->ref_deltas[ref] * scale
-					+ lf->mode_deltas[mode] * scale;
-				lfi->lvl[seg_id][ref][mode] =
-					vp9_clamp(inter_lvl, 0,
-					MAX_LOOP_FILTER);
+		if (!lf->mode_ref_delta_enabled) {
+			/*we could get rid of this if we assume that deltas are set to
+			zero when not in use; encoder always uses deltas*/
+			memset(lfi->lvl[seg_id], lvl_seg, sizeof(lfi->lvl[seg_id]));
+		} else {
+			int ref, mode;
+			const int intra_lvl = lvl_seg +	lf->ref_deltas[INTRA_FRAME]
+						* scale;
+			lfi->lvl[seg_id][INTRA_FRAME][0] =
+					vp9_clamp(intra_lvl, 0, MAX_LOOP_FILTER);
+
+			for (ref = LAST_FRAME; ref < MAX_REF_FRAMES; ++ref) {
+				/* LAST_FRAME = 1, MAX_REF_FRAMES = 4*/
+				for (mode = 0; mode < MAX_MODE_LF_DELTAS; ++mode) {
+					/*MAX_MODE_LF_DELTAS = 2*/
+					const int inter_lvl =
+						lvl_seg + lf->ref_deltas[ref] * scale
+						+ lf->mode_deltas[mode] * scale;
+					lfi->lvl[seg_id][ref][mode] =
+						vp9_clamp(inter_lvl, 0,
+						MAX_LOOP_FILTER);
 				}
 			}
 		}
@@ -439,7 +440,7 @@ codec_vp9_setup_workspace(struct amvdec_core *core, struct codec_vp9 *vp9)
 	dma_addr_t wkaddr;
 
 	/* Allocate some memory for the VP9 decoder's state */
-	vp9->workspace_vaddr = dma_zalloc_coherent(core->dev, SIZE_WORKSPACE,
+	vp9->workspace_vaddr = dma_alloc_coherent(core->dev, SIZE_WORKSPACE,
 						   &wkaddr, GFP_KERNEL);
 	if (!vp9->workspace_vaddr) {
 		dev_err(core->dev, "Failed to allocate VP9 Workspace\n");
@@ -645,12 +646,12 @@ static void codec_vp9_set_mpred_mv(struct amvdec_core *core,
 			 codec_vp9_get_frame_mv_paddr(vp9, vp9->cur_frame));
 
 	amvdec_write_dos(core, HEVC_MPRED_MV_RD_START_ADDR,
-			codec_vp9_get_frame_mv_paddr(vp9, vp9->prev_frame));
+			 codec_vp9_get_frame_mv_paddr(vp9, vp9->prev_frame));
 	amvdec_write_dos(core, HEVC_MPRED_MV_RPTR,
-			codec_vp9_get_frame_mv_paddr(vp9, vp9->prev_frame));
+			 codec_vp9_get_frame_mv_paddr(vp9, vp9->prev_frame));
 
 	mpred_mv_rd_end_addr = codec_vp9_get_frame_mv_paddr(vp9, vp9->prev_frame)
-	+ (vp9->lcu_total * MV_MEM_UNIT);
+			       + (vp9->lcu_total * MV_MEM_UNIT);
 	amvdec_write_dos(core, HEVC_MPRED_MV_RD_END_ADDR, mpred_mv_rd_end_addr);
 }
 
@@ -667,24 +668,18 @@ static void codec_vp9_update_next_ref(struct codec_vp9 *vp9)
 
 	for (mask = refresh_frame_flags; mask; mask >>= 1) {
 		//printk("mask=%08X; ref_index=%d\n", mask, ref_index);
-		if (mask & 1) {
+		if (mask & 1)
 			vp9->next_ref_frame_map[ref_index] = buf_idx;
-			//++frame_bufs[vp9->new_fb_idx].ref_count;
-		} else
+		else
 			vp9->next_ref_frame_map[ref_index] =
 				vp9->ref_frame_map[ref_index];
-		/* Current thread holds the reference frame.*/
-		/*if (vp9->ref_frame_map[ref_index] >= 0)
-			++frame_bufs[vp9->ref_frame_map[ref_index]].ref_count;*/
+
 		++ref_index;
 	}
 
-	for (; ref_index < REF_FRAMES; ++ref_index) {
+	for (; ref_index < REF_FRAMES; ++ref_index)
 		vp9->next_ref_frame_map[ref_index] =
 			vp9->ref_frame_map[ref_index];
-		/*if (vp9->ref_frame_map[ref_index] >= 0)
-			++frame_bufs[vp9->ref_frame_map[ref_index]].ref_count;*/
-	}
 }
 
 static void codec_vp9_update_ref(struct codec_vp9 *vp9)
@@ -707,11 +702,12 @@ static void codec_vp9_update_ref(struct codec_vp9 *vp9)
 		++ref_index;
 	}
 
-	for (; ref_index < REF_FRAMES && !param->p.show_existing_frame;
-		++ref_index) {
+	if (param->p.show_existing_frame)
+		return;
+
+	for (; ref_index < REF_FRAMES; ++ref_index)
 		vp9->ref_frame_map[ref_index] =
 			vp9->next_ref_frame_map[ref_index];
-	}
 }
 
 static struct vp9_frame * codec_vp9_get_frame_by_idx(struct codec_vp9 *vp9, int idx)
@@ -965,15 +961,14 @@ static int codec_vp9_process_rpm(struct codec_vp9 *vp9)
 	union rpm_param *param = &vp9->rpm_param;
 	int src_changed = 0;
 	int is_10bit = 0;
-	int lcu_size = 64; /*fixed 64*/
-	int pic_width_64 = (param->p.width + 63) & (~0x3f);
-	int pic_height_32 = (param->p.height + 31) & (~0x1f);
-	int pic_width_lcu  = (pic_width_64 % lcu_size) ?
-				pic_width_64 / lcu_size  + 1
-				: pic_width_64 / lcu_size;
-	int pic_height_lcu = (pic_height_32 % lcu_size) ?
-				pic_height_32 / lcu_size + 1
-				: pic_height_32 / lcu_size;
+	int pic_width_64 = ALIGN(param->p.width, 64);
+	int pic_height_32 = ALIGN(param->p.height, 32);
+	int pic_width_lcu  = (pic_width_64 % LCU_SIZE) ?
+				pic_width_64 / LCU_SIZE  + 1
+				: pic_width_64 / LCU_SIZE;
+	int pic_height_lcu = (pic_height_32 % LCU_SIZE) ?
+				pic_height_32 / LCU_SIZE + 1
+				: pic_height_32 / LCU_SIZE;
 	vp9->lcu_total = pic_width_lcu * pic_height_lcu;
 
 	if (param->p.bit_depth == 10)
-- 
2.7.4

